"use strict";(self.webpackChunkweave_gitops_docs=self.webpackChunkweave_gitops_docs||[]).push([[54527],{55205:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const r={},l="Templating from Generators",o={unversionedId:"gitopssets/guide",id:"version-0.25.0/gitopssets/guide",title:"Templating from Generators",description:"Basics",source:"@site/versioned_docs/version-0.25.0/gitopssets/guide.mdx",sourceDirName:"gitopssets",slug:"/gitopssets/guide",permalink:"/docs/0.25.0/gitopssets/guide",draft:!1,editUrl:"https://github.com/weaveworks/weave-gitops/edit/main/website/versioned_docs/version-0.25.0/gitopssets/guide.mdx",tags:[],version:"0.25.0",frontMatter:{},sidebar:"docs",previous:{title:"Installation",permalink:"/docs/0.25.0/gitopssets/installation"},next:{title:"API reference",permalink:"/docs/0.25.0/gitopssets/api-reference"}},s={},p=[{value:"Basics",id:"basics",level:2},{value:"Generation",id:"generation",level:2},{value:"Rendering templates",id:"rendering-templates",level:2},{value:"Repeating templates",id:"repeating-templates",level:2},{value:"Delimiters",id:"delimiters",level:2},{value:"Unquoted values",id:"unquoted-values",level:3},{value:"Generators",id:"generators",level:2},{value:"List generator",id:"list-generator",level:3},{value:"GitRepository generator",id:"gitrepository-generator",level:3},{value:"Generation from files",id:"generation-from-files",level:4},{value:"Generation from directories",id:"generation-from-directories",level:4},{value:"PullRequests generator",id:"pullrequests-generator",level:3},{value:"Matrix generator",id:"matrix-generator",level:3},{value:"Optional Name for Matrix elements",id:"optional-name-for-matrix-elements",level:4},{value:"apiClient generator",id:"apiclient-generator",level:3},{value:"APIClient JSONPath",id:"apiclient-jsonpath",level:4},{value:"APIClient POST body",id:"apiclient-post-body",level:4},{value:"APIClient simple results",id:"apiclient-simple-results",level:4},{value:"Cluster generator",id:"cluster-generator",level:3},{value:"ImagePolicy generator",id:"imagepolicy-generator",level:3},{value:"Templating functions",id:"templating-functions",level:2},{value:"sanitize template function",id:"sanitize-template-function",level:3},{value:"getordefault",id:"getordefault",level:3},{value:"Security",id:"security",level:2},{value:"Limiting via service-accounts",id:"limiting-via-service-accounts",level:2},{value:"gitopsset-controller configuration",id:"gitopsset-controller-configuration",level:2},{value:"Notifications",id:"notifications",level:2}],m={toc:p};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"templating-from-generators"},"Templating from Generators"),(0,i.kt)("h2",{id:"basics"},"Basics"),(0,i.kt)("p",null,"Currently rendering templates operates in two phases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Generate all template parameters from the configured generators"),(0,i.kt)("li",{parentName:"ul"},"Render all the templates for each set of template parameters")),(0,i.kt)("p",null,"Please read the ",(0,i.kt)("a",{parentName:"p",href:"#security"},"security information")," below before using this."),(0,i.kt)("h2",{id:"generation"},"Generation"),(0,i.kt)("p",null,"The simplest generator is the ",(0,i.kt)("inlineCode",{parentName:"p"},"List")," generator."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: templates.weave.works/v1alpha1\nkind: GitOpsSet\nmetadata:\n  name: gitopsset-sample\nspec:\n  generators:\n    - list:\n        elements:\n          - env: dev\n            team: dev-team\n          - env: production\n            team: ops-team\n          - env: staging\n            team: ops-team\n")),(0,i.kt)("p",null,"The elements in there are a set JSON of objects",(0,i.kt)("sup",{parentName:"p",id:"fnref-yaml"},(0,i.kt)("a",{parentName:"sup",href:"#fn-yaml",className:"footnote-ref"},"yaml")),", there are three in this example, and each of them has two keys, ",(0,i.kt)("inlineCode",{parentName:"p"},"env")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"team"),"."),(0,i.kt)("p",null,"Other generators provide different sets of keys and values."),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"#generators"},"generators")," documentation below provides more information on what the other generators output."),(0,i.kt)("h2",{id:"rendering-templates"},"Rendering templates"),(0,i.kt)("p",null,"Templates are Kubernetes resources in YAML format."),(0,i.kt)("p",null,"Each template is rendered for each element generated by the generators."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.weave.works/v1alpha1\nkind: GitOpsSet\nmetadata:\n  name: gitopsset-sample\nspec:\n  generators:\n    - list:\n        elements:\n          - env: dev\n            team: dev-team\n          - env: production\n            team: ops-team\n          - env: staging\n            team: ops-team\n  templates:\n    - content:\n        kind: Kustomization\n        apiVersion: kustomize.toolkit.fluxcd.io/v1beta2\n        metadata:\n          name: "{{ .Element.env }}-demo"\n          labels:\n            app.kubernetes.io/name: go-demo\n            app.kubernetes.io/instance: "{{ .Element.env }}"\n            com.example/team: "{{ .Element.team }}"\n        spec:\n          interval: 5m\n          path: "./examples/kustomize/environments/{{ .Element.env }}"\n          prune: true\n          sourceRef:\n            kind: GitRepository\n            name: go-demo-repo\n')),(0,i.kt)("p",null,"The generated elements are provided to the template in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Element")," scope, so\n",(0,i.kt)("inlineCode",{parentName:"p"},".Element.dev")," refers to the ",(0,i.kt)("inlineCode",{parentName:"p"},"dev")," field from the List element."),(0,i.kt)("p",null,"The output from all generators is exposed in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Element")," scope, not just List\ngenerators."),(0,i.kt)("h2",{id:"repeating-templates"},"Repeating templates"),(0,i.kt)("p",null,"The output from a generator is an array of JSON objects",(0,i.kt)("sup",{parentName:"p",id:"fnref-yaml"},(0,i.kt)("a",{parentName:"sup",href:"#fn-yaml",className:"footnote-ref"},"yaml")),", the keys of which can contain repeating elements, either further JSON objects, or scalar values."),(0,i.kt)("p",null,"It can be desirable to repeat a template for a repeated element in a generated\nvalue."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.weave.works/v1alpha1\nkind: GitOpsSet\nmetadata:\n  name: repeated-gitopsset-sample\nspec:\n  generators:\n    - list:\n        elements:\n          - env: dev\n            team: dev-team\n            teams:\n              - name: "team1"\n              - name: "team2"\n              - name: "team3"\n          - env: staging\n            team: staging-team\n            teams:\n              - name: "team4"\n              - name: "team5"\n              - name: "team6"\n  templates:\n    - repeat: "{ .teams }"\n      content:\n        kind: ConfigMap\n        apiVersion: v1\n        metadata:\n          name: "{{ .Repeat.name }}-demo"\n        data:\n          name: "{{ .Repeat.name }}-demo"\n          team: "{{ .Element.team }}"\n')),(0,i.kt)("p",null,"The template ",(0,i.kt)("inlineCode",{parentName:"p"},"repeat")," field is a ",(0,i.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/reference/kubectl/jsonpath/"},"JSONPath")," expression that is applied to each element during the template rendering."),(0,i.kt)("p",null,"Templates that use ",(0,i.kt)("inlineCode",{parentName:"p"},"repeat")," will have two separate scopes for the template params, ",(0,i.kt)("inlineCode",{parentName:"p"},".Element")," which is the top-level element generated by the generator, and the additional ",(0,i.kt)("inlineCode",{parentName:"p"},".Repeat")," scope, which is the repeating element."),(0,i.kt)("p",null,"In this case, six different ",(0,i.kt)("inlineCode",{parentName:"p"},"ConfigMaps"),' are generated, three for the "dev-team" and three for the "staging-team".'),(0,i.kt)("h2",{id:"delimiters"},"Delimiters"),(0,i.kt)("p",null,"The default delimiters for the template engine are ",(0,i.kt)("inlineCode",{parentName:"p"},"{{")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"}}"),", which is the same as the Go template engine."),(0,i.kt)("p",null,"These can be changed by adding an annotation to the ",(0,i.kt)("inlineCode",{parentName:"p"},"GitOpsSet"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.weave.works/v1alpha1\nkind: GitOpsSet\nmetadata:\n  name: gitopsset-sample\n  annotations:\n    templates.weave.works/delimiters: "${{,}}"\n')),(0,i.kt)("p",null,"Changing the delimiters can useful for:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Nesting GitopsSets within each other, as the default delimiters will conflict"),(0,i.kt)("li",{parentName:"ul"},"Providing unquoted values to yaml")),(0,i.kt)("h3",{id:"unquoted-values"},"Unquoted values"),(0,i.kt)("p",null,"In yaml ",(0,i.kt)("inlineCode",{parentName:"p"},"{{")," is invalid syntax and needs to be quoted. If you need to provide a un-quoted number value like ",(0,i.kt)("inlineCode",{parentName:"p"},"replicas: 3")," you should use the ",(0,i.kt)("inlineCode",{parentName:"p"},"${{,}}")," delimiters."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u274c ",(0,i.kt)("inlineCode",{parentName:"li"},"replicas: {{ .params.REPLICAS }}")," Invalid yaml"),(0,i.kt)("li",{parentName:"ul"},"\u274c ",(0,i.kt)("inlineCode",{parentName:"li"},'replicas: "{{ .params.REPLICAS }}"')," Valid yaml, incorrect type. The type is a string not a number and will fail validation."),(0,i.kt)("li",{parentName:"ul"},"\u2705 ",(0,i.kt)("inlineCode",{parentName:"li"},"replicas: ${{ .params.REPLICAS }}")," Valid yaml and correct number type.")),(0,i.kt)("p",null,"Unquoted values allow you to include objects in your templates too."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.weave.works/v1alpha1\nkind: GitOpsSet\nmetadata:\n  name: gitopsset-sample\n  annotations:\n    templates.weave.works/delimiters: "${{,}}"\nspec:\n  generators:\n    - list:\n        elements:\n          - env: dev\n            resources:\n              limits:\n                cpu: 100m\n                memory: 128Mi\n          - env: staging\n            resources:\n              limits:\n                cpu: 100m\n                memory: 128Mi\n  templates:\n    - content:\n        kind: Deployment\n        apiVersion: apps/v1\n        metadata:\n          name: go-demo\n        spec:\n          template:\n            spec:\n              containers:\n                - name: go-demo\n                  image: weaveworks/go-demo:0.2.0\n                  resources: ${{ .Element.resources | toJson }}\n')),(0,i.kt)("p",null,"With the default ",(0,i.kt)("inlineCode",{parentName:"p"},"{{,}}"),' delimiters this would fail as the "resources" field would need to be quoted.'),(0,i.kt)("p",null,"Again, if we quote them we would get a string value, not an object."),(0,i.kt)("h2",{id:"generators"},"Generators"),(0,i.kt)("p",null,"We currently provide these generators:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#list-generator"},"list")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#pullrequests-generator"},"pullRequests")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#gitrepository-generator"},"gitRepository")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#matrix-generator"},"matrix")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#apiclient-generator"},"apiClient")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#cluster-generator"},"cluster")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#imagepolicy-generator"},"imagepolicy"))),(0,i.kt)("h3",{id:"list-generator"},"List generator"),(0,i.kt)("p",null,"This is the simplest generator, which is a hard-coded array of JSON objects, described as YAML mappings."),(0,i.kt)("h3",{id:"gitrepository-generator"},"GitRepository generator"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"GitRepository")," generator operates on ",(0,i.kt)("a",{parentName:"p",href:"https://fluxcd.io/flux/components/source/gitrepositories/"},"Flux GitRepositories"),"."),(0,i.kt)("p",null,"When a ",(0,i.kt)("inlineCode",{parentName:"p"},"GitRepository")," is updated, this will trigger a regeneration of templates."),(0,i.kt)("p",null,"The generator operates in two different ways, you can parse files (YAML or JSON) into Elements, or you can scan directories for subdirectories."),(0,i.kt)("h4",{id:"generation-from-files"},"Generation from files"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.weave.works/v1alpha1\nkind: GitOpsSet\nmetadata:\n  name: repository-sample\nspec:\n  generators:\n    - gitRepository:\n        repositoryRef: go-demo-repo\n        files:\n          - path: examples/generation/dev.yaml\n          - path: examples/generation/production.yaml\n          - path: examples/generation/staging.yaml\n  templates:\n    - content:\n        kind: Kustomization\n        apiVersion: kustomize.toolkit.fluxcd.io/v1beta2\n        metadata:\n          name: "{{ .Element.env }}-demo"\n          labels:\n            app.kubernetes.io/name: go-demo\n            app.kubernetes.io/instance: "{{ .Element.env }}"\n            com.example/team: "{{ .Element.team }}"\n        spec:\n          interval: 5m\n          path: "./examples/kustomize/environments/{{ .Element.env }}"\n          prune: true\n          sourceRef:\n            kind: GitRepository\n            name: go-demo-repo\n')),(0,i.kt)("p",null,"In this example, a ",(0,i.kt)("a",{parentName:"p",href:"https://fluxcd.io/flux/components/source/gitrepositories/"},"Flux ",(0,i.kt)("inlineCode",{parentName:"a"},"GitRepository"))," called ",(0,i.kt)("inlineCode",{parentName:"p"},"go-demo-repo")," in the same namespace as the ",(0,i.kt)("inlineCode",{parentName:"p"},"GitOpsSet")," will be tracked, and ",(0,i.kt)("inlineCode",{parentName:"p"},"Kustomization")," resources will be generated from the three files listed."),(0,i.kt)("p",null,"These files can be JSON or YAML."),(0,i.kt)("p",null,"In this example we expect to find the following structure in the files:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"env: dev\nteam: developers\n")),(0,i.kt)("p",null,"Changes pushed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"GitRepository")," will result in rereconciliation of the templates into the cluster."),(0,i.kt)("p",null,"For security reasons, you need to explicitly list out the files that the generator should parse."),(0,i.kt)("h4",{id:"generation-from-directories"},"Generation from directories"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.weave.works/v1alpha1\nkind: GitOpsSet\nmetadata:\n  labels:\n    app.kubernetes.io/name: gitopsset\n    app.kubernetes.io/instance: gitopsset-sample\n    app.kubernetes.io/part-of: gitopssets-controller\n    app.kubernetes.io/managed-by: kustomize\n    app.kubernetes.io/created-by: gitopssets-controller\n  name: repository-sample\nspec:\n  generators:\n    - gitRepository:\n        repositoryRef: go-demo-repo\n        directories:\n          - path: examples/kustomize/environments/*\n  templates:\n    - content:\n        kind: Kustomization\n        apiVersion: kustomize.toolkit.fluxcd.io/v1beta2\n        metadata:\n          name: "{{ .Element.Base }}-demo"\n          labels:\n            app.kubernetes.io/name: go-demo\n            app.kubernetes.io/instance: "{{ .Element.Base }}"\n            com.example/team: "{{ .Element.Base }}"\n        spec:\n          interval: 5m\n          path: "{{ .Element.Directory }}"\n          prune: true\n          sourceRef:\n            kind: GitRepository\n            name: go-demo-repo\n')),(0,i.kt)("p",null,"In this example, a ",(0,i.kt)("a",{parentName:"p",href:"https://fluxcd.io/flux/components/source/gitrepositories/"},"Flux ",(0,i.kt)("inlineCode",{parentName:"a"},"GitRepository"))," called ",(0,i.kt)("inlineCode",{parentName:"p"},"go-demo-repo")," in the same namespace as the ",(0,i.kt)("inlineCode",{parentName:"p"},"GitOpsSet")," will be tracked, and ",(0,i.kt)("inlineCode",{parentName:"p"},"Kustomization")," resources are generated from paths within the ",(0,i.kt)("inlineCode",{parentName:"p"},"examples/kustomize/environments/*")," directory within the repository."),(0,i.kt)("p",null,"Each generated element has two keys, ",(0,i.kt)("inlineCode",{parentName:"p"},".Element.Directory")," which will be a repo-relative path and ",(0,i.kt)("inlineCode",{parentName:"p"},".Element.Base")," which contains the last element of the path, for example, for a directory ",(0,i.kt)("inlineCode",{parentName:"p"},"./examples/kustomize/environments/production")," this will be ",(0,i.kt)("inlineCode",{parentName:"p"},"production"),"."),(0,i.kt)("p",null,"It is also possible to exclude paths from the generated list, for example, if you do not want to generate for a directory you can exclude it with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: templates.weave.works/v1alpha1\nkind: GitOpsSet\nmetadata:\n  name: repository-sample\nspec:\n  generators:\n    - gitRepository:\n        repositoryRef: go-demo-repo\n        directories:\n          - path: examples/kustomize/environments/*\n          - path: examples/kustomize/environments/production\n            exclude: true\n  templates:\n    - content:\n")),(0,i.kt)("p",null,"In this case, all directories that are subdirectories of ",(0,i.kt)("inlineCode",{parentName:"p"},"examples/kustomize/environments")," will be generated, ",(0,i.kt)("strong",{parentName:"p"},"but")," not ",(0,i.kt)("inlineCode",{parentName:"p"},"examples/kustomize/environments/production"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note"),": The directory tree detection is restricted to the same directory as the path, no recursion is done."),(0,i.kt)("p",null,"In fact the path is treated as a ",(0,i.kt)("a",{parentName:"p",href:"https://pkg.go.dev/path/filepath#Glob"},"Glob"),"."),(0,i.kt)("h3",{id:"pullrequests-generator"},"PullRequests generator"),(0,i.kt)("p",null,"This will require to make authenticated requests to your Git hosting provider e.g. GitHub, GitLab, Bitbucket etc."),(0,i.kt)("p",null,'It does only require read-only access, but all API tokens should be guarded as carefully as possible, what is a "read-only" token today, might become a token with higher-privilege in the future.'),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"There have been many security compromises using API access tokens, do not let this happen to you!")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.weave.works/v1alpha1\nkind: GitOpsSet\nmetadata:\n  name: pull-requests-sample\nspec:\n  generators:\n    - pullRequests:\n        interval: 5m\n        driver: github\n        repo: bigkevmcd/go-demo\n        secretRef:\n          name: github-secret\n  templates:\n    - content:\n        apiVersion: source.toolkit.fluxcd.io/v1beta2\n        kind: GitRepository\n        metadata:\n          name: "pr-{{ .Element.Number }}-gitrepository"\n          namespace: default\n        spec:\n          interval: 5m0s\n          url: "{{ .Element.CloneURL }}"\n          ref:\n            branch: "{{ .Element.Branch }}"\n    - content:\n        apiVersion: kustomize.toolkit.fluxcd.io/v1beta2\n        kind: Kustomization\n        metadata:\n          name: "pr-{{ .Element.Number }}-demo"\n          namespace: default\n        spec:\n          interval: 5m\n          path: "./examples/kustomize/environments/dev"\n          prune: true\n          targetNamespace: "{{ .Element.Branch }}-ns"\n          sourceRef:\n            kind: GitRepository\n            name: "pr-{{ .Element.Number }}-gitrepository"\n')),(0,i.kt)("p",null,'This example will poll "github.com/bigkevmcd/go-demo" for open pull requests and trigger the deployment of these by creating a Flux ',(0,i.kt)("inlineCode",{parentName:"p"},"GitRepository")," and a ",(0,i.kt)("inlineCode",{parentName:"p"},"Kustomization")," to deploy."),(0,i.kt)("p",null,"As the generator only queries open pull requests, when a PR is closed, the generated resources will be removed."),(0,i.kt)("p",null,"For non-public installations, you can configure the ",(0,i.kt)("inlineCode",{parentName:"p"},"serverURL")," field and point it to your own installation."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"driver")," field can be ",(0,i.kt)("inlineCode",{parentName:"p"},"github")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"gitlab")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"bitbucketserver"),", other options can be supported from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jenkins-x/go-scm/blob/main/scm/factory/factory.go"},"go-scm"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"forks")," flag field can be used to indicate whether to include forks in the target pull requests or not. If set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," any pull request from a fork repository will be included, otherwise if ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," or not indicated the pull requests from fork repositories are discarded."),(0,i.kt)("p",null,"Additionally labels can be provided for querying pull requests with matching labels e.g."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"- pullRequests:\n    interval: 5m\n    driver: github\n    repo: bigkevmcd/go-demo\n    secretRef:\n      name: github-secret\n    forks: false\n    labels:\n      - deploy\n")),(0,i.kt)("p",null,"The fields emitted by the pull-request are as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Number")," this is generated as a string representation"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Branch")," this is the source branch"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"HeadSHA")," this is the SHA of the commit in the merge branch"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CloneURL")," this is the HTTPS clone URL for this repository"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CloneSSHURL")," this is the SSH clone URL for this repository"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Fork")," this indicates whether the pull request is from a fork (true) or not (false)")),(0,i.kt)("p",null,"Create a read-only token that can list Pull Requests, and store it in a secret:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl create secret generic github-secret \\\n  --from-literal password=<insert access token here>\n")),(0,i.kt)("h3",{id:"matrix-generator"},"Matrix generator"),(0,i.kt)("p",null,"The matrix generator doesn't generate resources by itself. It combines the results of\ngeneration from other generators e.g.:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: templates.weave.works/v1alpha1\nkind: GitOpsSet\nmetadata:\n  name: matrix-sample\nspec:\n  generators:\n    - matrix:\n        generators:\n          - gitRepository:\n              repositoryRef: go-demo-repo\n              files:\n                - path: examples/generation/dev.yaml\n                - path: examples/generation/production.yaml\n                - path: examples/generation/staging.yaml\n          - list:\n              elements:\n                - cluster: dev-cluster\n                  version: 1.0.0\n")),(0,i.kt)("p",null,"Given the files mentioned all have the following structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"env: dev\nteam: developers\n")),(0,i.kt)("p",null,"This will result in three sets of generated parameters, which are a combination of the maps in the files in the gitRepository, and the elements in the list generator, this can result in a combinatorial explosion of resources being created in your cluster."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"- env: dev\n  team: developers\n  cluster: dev-cluster\n  version: 1.0.0\n- env: staging\n  team: staging-team\n  cluster: dev-cluster\n  version: 1.0.0\n- env: production\n  team: production-team\n  cluster: dev-cluster\n  version: 1.0.0\n")),(0,i.kt)("p",null,"These can be referenced in the templates, note that all keys in the merged generators from the Matrix are contained in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Element")," scope."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.weave.works/v1alpha1\nkind: GitOpsSet\nmetadata:\n  name: matrix-sample\nspec:\n  generators:\n    - matrix:\n        generators:\n          - gitRepository:\n              repositoryRef: go-demo-repo\n              files:\n                - path: examples/generation/dev.yaml\n                - path: examples/generation/production.yaml\n                - path: examples/generation/staging.yaml\n          - list:\n              elements:\n                - cluster: dev-cluster\n                  version: 1.0.0\n  templates:\n    - content:\n        kind: Kustomization\n        apiVersion: kustomize.toolkit.fluxcd.io/v1beta2\n        metadata:\n          name: "{{ .Element.env }}-demo"\n          labels:\n            app.kubernetes.io/name: go-demo\n            app.kubernetes.io/instance: "{{ .Element.env }}"\n            com.example/team: "{{ .Element.team }}"\n            com.example/cluster: "{{ .Element.cluster }}"\n            com.example/version: "{{ .Element.version }}"\n        spec:\n          interval: 5m\n          path: "./examples/kustomize/environments/{{ .Element.env }}"\n          prune: true\n          sourceRef:\n            kind: GitRepository\n            name: go-demo-repo\n')),(0,i.kt)("h4",{id:"optional-name-for-matrix-elements"},"Optional Name for Matrix elements"),(0,i.kt)("p",null,"If you want to use two generators in a Matrix that output the same fields, they\nwill collide, for example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"ImagePolicy")," generator outputs a ",(0,i.kt)("inlineCode",{parentName:"p"},"latestImage"),"\nfield, if you have two, they will collide."),(0,i.kt)("p",null,"You can provide a name for the generator in the Matrix:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.weave.works/v1alpha1\nkind: GitOpsSet\nmetadata:\n  name: matrix-sample\nspec:\n  generators:\n    - matrix:\n        generators:\n          - name: gen1\n            gitRepository:\n              repositoryRef: go-demo-repo\n              files:\n                - path: examples/generation/dev.yaml\n                - path: examples/generation/production.yaml\n                - path: examples/generation/staging.yaml\n          - name: gen2\n          - list:\n              elements:\n                - cluster: dev-cluster\n                  version: 1.0.0\n  templates:\n    - content:\n        kind: Kustomization\n        apiVersion: kustomize.toolkit.fluxcd.io/v1beta2\n        metadata:\n          name: "{{ .Element.gen1.env }}-demo"\n          labels:\n            app.kubernetes.io/name: go-demo\n            app.kubernetes.io/instance: "{{ .Element.gen1.env }}"\n            com.example/team: "{{ .Element.gen1.team }}"\n            com.example/cluster: "{{ .Element.gen2.cluster }}"\n            com.example/version: "{{ .Element.gen2.version }}"\n        spec:\n          interval: 5m\n          path: "./examples/kustomize/environments/{{ .Element.gen1.env }}"\n          prune: true\n          sourceRef:\n            kind: GitRepository\n            name: go-demo-repo\n\n')),(0,i.kt)("p",null,"The name value is used as a key in the generated results."),(0,i.kt)("p",null,"The example above will yield:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"- gen1:\n    env: dev\n    team: developers\n  gen2:\n    cluster: dev-cluster\n    ersion: 1.0.0\n- gen1:\n    env: staging\n    team: staging-team\n  gen2:\n    cluster: dev-cluster\n    version: 1.0.0\n- gen1:\n    env: production\n    team: production-team\n  gen2:\n    cluster: dev-cluster\n    version: 1.0.0\n")),(0,i.kt)("h3",{id:"apiclient-generator"},"apiClient generator"),(0,i.kt)("p",null,"This generator is configured to poll an HTTP endpoint and parse the result as the generated values."),(0,i.kt)("p",null,"This will poll an endpoint on the interval, instead of using the simpler to use PullRequest generator, you can access GitHub's API with the APIClient generator."),(0,i.kt)("p",null,"The PullRequest generator is simpler to use, and works across multiple different git-providers."),(0,i.kt)("p",null,"The GitHub ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/rest/pulls/pulls?apiVersion=2022-11-28#list-pull-requests"},"documentation")," for the API endpoint shows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl \\\n  -H "Accept: application/vnd.github+json" \\\n  -H "Authorization: Bearer <YOUR-TOKEN>"\\\n  -H "X-GitHub-Api-Version: 2022-11-28" \\\n  https://api.github.com/repos/OWNER/REPO/pulls\n')),(0,i.kt)("p",null,"This can be translated into..."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.weave.works/v1alpha1\nkind: GitOpsSet\nmetadata:\n  labels:\n    app.kubernetes.io/name: gitopsset\n    app.kubernetes.io/instance: gitopsset-sample\n    app.kubernetes.io/part-of: gitopssets-controller\n    app.kubernetes.io/managed-by: kustomize\n    app.kubernetes.io/created-by: gitopssets-controller\n  name: api-client-sample\nspec:\n  generators:\n    - apiClient:\n        interval: 5m\n        endpoint: https://api.github.com/repos/bigkevmcd/go-demo/pulls\n        headersRef:\n          name: github-secret\n          kind: Secret\n  templates:\n    - content:\n        apiVersion: source.toolkit.fluxcd.io/v1beta2\n        kind: GitRepository\n        metadata:\n          name: "pr-{{ .Element.id | toJson}}-gitrepository"\n          namespace: default\n        spec:\n          interval: 5m0s\n          url: "{{ .Element.head.repo.clone_url }}"\n          ref:\n            branch: "{{ .Element.head.ref }}"\n    - content:\n        apiVersion: kustomize.toolkit.fluxcd.io/v1beta2\n        kind: Kustomization\n        metadata:\n          name: "pr-{{ .Element.id | toJson }}-demo"\n          namespace: default\n        spec:\n          interval: 5m\n          path: "./examples/kustomize/environments/dev"\n          prune: true\n          targetNamespace: "{{ .Element.head.ref }}-ns"\n          sourceRef:\n            kind: GitRepository\n            name: "pr-{{ .Element.id | toJson }}-gitrepository"\n')),(0,i.kt)("p",null,"As with the ",(0,i.kt)("a",{parentName:"p",href:"#pullrequests-generator"},"Pull Request generator"),", this also requires a secret token to be able to access the API"),(0,i.kt)("p",null,"We need to pass this as an HTTP header."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Secret\nmetadata:\n  name: github-secret\n  namespace: default\ntype: Opaque\nstringData:\n  Accept: application/vnd.github+json\n  Authorization: Bearer ghp_<redacted>\n  X-GitHub-Api-Version: "2022-11-28"\n')),(0,i.kt)("p",null,"The keys in the secret match the command-line example using curl."),(0,i.kt)("p",null,"Unlike the Pull Request generator, you need to figure out the paths to the elements yourself."),(0,i.kt)("h4",{id:"apiclient-jsonpath"},"APIClient JSONPath"),(0,i.kt)("p",null,"Not all APIs return an array of JSON objects, sometimes it's nested within a result type structure e.g."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "things": [\n    {\n      "env": "dev",\n      "team": "dev-team"\n    },\n    {\n      "env": "production",\n      "team": "opts-team"\n    },\n    {\n      "env": "staging",\n      "team": "opts-team"\n    }\n  ]\n}\n')),(0,i.kt)("p",null,"You can use JSONPath to extract the fields from this data..."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.weave.works/v1alpha1\nkind: GitOpsSet\nmetadata:\n  labels:\n    app.kubernetes.io/name: gitopsset\n    app.kubernetes.io/instance: gitopsset-sample\n    app.kubernetes.io/part-of: gitopssets-controller\n    app.kubernetes.io/managed-by: kustomize\n    app.kubernetes.io/created-by: gitopssets-controller\n  name: api-client-sample\nspec:\n  generators:\n    - apiClient:\n        interval: 5m\n        endpoint: https://api.example.com/demo\n        jsonPath: "{ $.things }"\n')),(0,i.kt)("p",null,"This will generate three maps for templates, with just the ",(0,i.kt)("em",{parentName:"p"},"env")," and ",(0,i.kt)("em",{parentName:"p"},"team")," keys."),(0,i.kt)("h4",{id:"apiclient-post-body"},"APIClient POST body"),(0,i.kt)("p",null,"Another piece of functionality in the APIClient generator is the ability to POST\nJSON to the API."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.weave.works/v1alpha1\nkind: GitOpsSet\nmetadata:\n  labels:\n    app.kubernetes.io/name: gitopsset\n    app.kubernetes.io/instance: gitopsset-sample\n    app.kubernetes.io/part-of: gitopssets-controller\n    app.kubernetes.io/managed-by: kustomize\n    app.kubernetes.io/created-by: gitopssets-controller\n  name: api-client-sample\nspec:\n  generators:\n    - apiClient:\n        interval: 5m\n        endpoint: https://api.example.com/demo\n        body:\n          name: "testing"\n          value: "testing2"\n')),(0,i.kt)("p",null,'This will send a request body as JSON (Content-Type "application/json") to the\nserver and interpret the result.'),(0,i.kt)("p",null,"The JSON body sent will look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{ "name": "testing", "value": "testing2" }\n')),(0,i.kt)("h4",{id:"apiclient-simple-results"},"APIClient simple results"),(0,i.kt)("p",null,"Instead of using the JSONPath to extract from a complex structure, you can configure the result to be a single element."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: templates.weave.works/v1alpha1\nkind: GitOpsSet\nmetadata:\n  labels:\n    app.kubernetes.io/name: gitopsset\n    app.kubernetes.io/instance: gitopsset-sample\n    app.kubernetes.io/part-of: gitopssets-controller\n    app.kubernetes.io/managed-by: kustomize\n    app.kubernetes.io/created-by: gitopssets-controller\n  name: api-client-sample\nspec:\n  generators:\n    - apiClient:\n        singleElement: true\n        interval: 5m\n        endpoint: https://api.example.com/demo\n")),(0,i.kt)("p",null,"Whatever result is parsed from the API endpoint will be returned as a map in a single element."),(0,i.kt)("p",null,"For generation, you might need to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"repeat")," mechanism to generate repeating results."),(0,i.kt)("h3",{id:"cluster-generator"},"Cluster generator"),(0,i.kt)("p",null,"The cluster generator generates from in-cluster GitOpsCluster resources."),(0,i.kt)("p",null,"For example, this ",(0,i.kt)("inlineCode",{parentName:"p"},"GitOpsSet")," will generate a ",(0,i.kt)("inlineCode",{parentName:"p"},"Kustomization")," resource for each cluster matching the ",(0,i.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/"},"Label selector"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.weave.works/v1alpha1\nkind: GitOpsSet\nmetadata:\n  name: cluster-sample\nspec:\n  generators:\n    - cluster:\n        selector:\n          matchLabels:\n            env: dev\n            team: dev-team\n  templates:\n    - content:\n        kind: Kustomization\n        apiVersion: kustomize.toolkit.fluxcd.io/v1beta2\n        metadata:\n          name: "{{ .Element.ClusterName }}-demo"\n          labels:\n            app.kubernetes.io/name: go-demo\n            app.kubernetes.io/instance: "{{ .Element.ClusterName }}"\n            com.example/team: "{{ .Element.ClusterLabels.team }}"\n        spec:\n          interval: 5m\n          path: "./examples/kustomize/environments/{{ .Element.ClusterLabels.env }}"\n          prune: true\n          sourceRef:\n            kind: GitRepository\n            name: go-demo-repo\n')),(0,i.kt)("p",null,"The following fields are generated for each GitOpsCluster."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ClusterName")," the name of the cluster"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ClusterNamespace")," the namespace that this cluster is from"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ClusterLabels")," the labels from the metadata field on the GitOpsCluster"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ClusterAnnotations")," the annotations from the metadata field on the GitOpsCluster")),(0,i.kt)("p",null,"If the selector is not provided, all clusters from all namespaces will be returned:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: templates.weave.works/v1alpha1\nkind: GitOpsSet\nmetadata:\n  name: cluster-sample\nspec:\n  generators:\n    - cluster: {}\n")),(0,i.kt)("p",null,"Otherwise if the selector is empty, no clusters will be generated:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: templates.weave.works/v1alpha1\nkind: GitOpsSet\nmetadata:\n  name: cluster-sample\nspec:\n  generators:\n    - cluster:\n        selector: {}\n")),(0,i.kt)("h3",{id:"imagepolicy-generator"},"ImagePolicy generator"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ImagePolicy")," generator works with the ",(0,i.kt)("a",{parentName:"p",href:"https://fluxcd.io/flux/components/image/"},"Flux Image Automation"),"."),(0,i.kt)("p",null,"When an ",(0,i.kt)("inlineCode",{parentName:"p"},"ImagePolicy")," is updated, this will trigger a regeneration of templates."),(0,i.kt)("p",null,"This can be used simply, to create a deployment with an image...or, combined with a Matrix generator, to manage multiple workloads with the same image."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.weave.works/v1alpha1\nkind: GitOpsSet\nmetadata:\n  name: imagepolicy-example\n  namespace: default\nspec:\n  generators:\n    - imagePolicy:\n        policyRef: podinfo\n  templates:\n    - content:\n        kind: ConfigMap\n        apiVersion: v1\n        metadata:\n          name: "demo-configmap"\n        data:\n          image: "{{ .Element.latestImage }}"\n')),(0,i.kt)("p",null,"In this example, a ",(0,i.kt)("inlineCode",{parentName:"p"},"ConfigMap")," is generated containing the latest image whenever an ",(0,i.kt)("inlineCode",{parentName:"p"},"ImagePolicy")," called ",(0,i.kt)("inlineCode",{parentName:"p"},"podinfo")," is updated."),(0,i.kt)("p",null,"Combined in a Matrix, like this, it will generate two ",(0,i.kt)("inlineCode",{parentName:"p"},"ConfigMaps")," with the values."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.weave.works/v1alpha1\nkind: GitOpsSet\nmetadata:\n  name: imagepolicy-matrix-example\n  namespace: default\nspec:\n  generators:\n    - matrix:\n        generators:\n          - imagePolicy:\n             policyRef: podinfo\n          - list:\n              elements:\n                - cluster: dev-cluster\n                  version: 1.0.0\n                - cluster: prod-cluster\n                  version: 1.0.0\n  templates:\n    - content:\n        kind: ConfigMap\n        apiVersion: v1\n        metadata:\n          name: "demo-configmap-{{ .Element.cluster }}"\n        data:\n          image: "{{ .Element.latestImage }}"\n          cluster: "{{ .Element.cluster }}"\n          version: "{{ .Element.version }}"\n')),(0,i.kt)("p",null,"The resulting ConfigMaps look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get configmaps\nNAME                          DATA   AGE\ndemo-configmap-dev-cluster    3      3m19s\ndemo-configmap-prod-cluster   3      3m19s\n")),(0,i.kt)("p",null,"With the templated fields like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: demo-configmap-dev-cluster\n  namespace: default\ndata:\n  cluster: dev-cluster\n  image: stefanprodan/podinfo:5.1.4\n  version: 1.0.0\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: demo-configmap-prod-cluster\n  namespace: default\ndata:\n  cluster: prod-cluster\n  image: stefanprodan/podinfo:5.1.4\n  version: 1.0.0\n")),(0,i.kt)("h2",{id:"templating-functions"},"Templating functions"),(0,i.kt)("p",null,"Currently, the ",(0,i.kt)("a",{parentName:"p",href:"http://masterminds.github.io/sprig/"},"Sprig")," functions are available in the templating, with some functions removed",(0,i.kt)("sup",{parentName:"p",id:"fnref-sprig"},(0,i.kt)("a",{parentName:"sup",href:"#fn-sprig",className:"footnote-ref"},"sprig"))," for security reasons."),(0,i.kt)("p",null,"In addition, we also provide two additional functions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"sanitize - sanitises strings to be compatible with ",(0,i.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names"},"Kubernetes DNS")," name requirements"),(0,i.kt)("li",{parentName:"ul"},"getordefault - gets a key from the ",(0,i.kt)("inlineCode",{parentName:"li"},".Element")," or defaults to another value.")),(0,i.kt)("p",null,"The examples below assume an element that looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "team": "engineering dev"\n}\n')),(0,i.kt)("h3",{id:"sanitize-template-function"},"sanitize template function"),(0,i.kt)("p",null,"And a template that looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"kind: Service\nmetadata:\n  name: {{ sanitize .Element.team }}-demo\n")),(0,i.kt)("p",null,"This would output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"kind: Service\nmetadata:\n  name: engineeringdev-demo\n")),(0,i.kt)("h3",{id:"getordefault"},"getordefault"),(0,i.kt)("p",null,"For template that looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'kind: Service\nmetadata:\n  name: {{ getordefault .Element "name" "defaulted" }}-demo\n')),(0,i.kt)("p",null,"This would output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"kind: Service\nmetadata:\n  name: defaulted-demo\n")),(0,i.kt)("p",null,"If the ",(0,i.kt)("em",{parentName:"p"},"key")," to get does exist in the ",(0,i.kt)("inlineCode",{parentName:"p"},".Element"),' it will be inserted, the "default" is only inserted if it doesn\'t exist.'),(0,i.kt)("h2",{id:"security"},"Security"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"WARNING")," generating resources and applying them directly into your cluster can be dangerous to the health of your cluster."),(0,i.kt)("p",null,"This is especially true for the ",(0,i.kt)("inlineCode",{parentName:"p"},"GitRepository")," generator, where it may not be obvious to the author of the files, or the author of the template the consequences of the template rendering."),(0,i.kt)("p",null,"The default ",(0,i.kt)("inlineCode",{parentName:"p"},"ServiceAccount")," that is used by the gitopssets-controller is extremely limited, and can not create resources, you will need to explicitly grant permissions to create any of the resources you declare in the template, missing permissions will appear in the controller logs."),(0,i.kt)("p",null,"It is not recommended that you create a role with blanket permissions, under the right circumstances, someone could accidentally ",(0,i.kt)("em",{parentName:"p"},"or")," maliciously overwrite the cluster control-plane, which could be very dangerous."),(0,i.kt)("h2",{id:"limiting-via-service-accounts"},"Limiting via service-accounts"),(0,i.kt)("p",null,"You can configure the service-account that is used to create resources."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.weave.works/v1alpha1\nkind: GitOpsSet\nmetadata:\n  name: matrix-sample\nspec:\n  # the controller will impersonate this service account\n  serviceAccountName: test-sa\n  generators:\n    - list:\n        elements:\n          - env: dev\n            team: dev-team\n          - env: production\n            team: ops-team\n          - env: staging\n            team: ops-team\n  templates:\n    - content:\n        kind: Kustomization\n        apiVersion: kustomize.toolkit.fluxcd.io/v1beta2\n        metadata:\n          name: "{{ .Element.env }}-demo"\n          labels:\n            app.kubernetes.io/name: go-demo\n            app.kubernetes.io/instance: "{{ .Element.env }}"\n            com.example/team: "{{ .Element.team }}"\n        spec:\n          interval: 5m\n          path: "./examples/kustomize/environments/{{ .Element.env }}"\n          prune: true\n          sourceRef:\n            kind: GitRepository\n            name: go-demo-repo\n')),(0,i.kt)("h2",{id:"gitopsset-controller-configuration"},"gitopsset-controller configuration"),(0,i.kt)("p",null,"The enabled generators can be configured via the ",(0,i.kt)("inlineCode",{parentName:"p"},"--enabled-generators")," flag, which takes a comma separated list of generators to enable."),(0,i.kt)("p",null,"The default is to enable all generators."),(0,i.kt)("p",null,"For example to enable only the ",(0,i.kt)("inlineCode",{parentName:"p"},"List")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"GitRepository")," generators:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"--enabled-generators=List,GitRepository\n")),(0,i.kt)("p",null,"When a GitOpsSet that uses disabled generators is created, the disabled generators will be silently ignored."),(0,i.kt)("h2",{id:"notifications"},"Notifications"),(0,i.kt)("p",null,"Events are enabled which will trigger Kubernetes events when successful reconciliation occurs with a ",(0,i.kt)("inlineCode",{parentName:"p"},"Normal")," event or when reconciliation fails with an ",(0,i.kt)("inlineCode",{parentName:"p"},"Error")," event. Fluxcd's ",(0,i.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/fluxcd/pkg/runtime/events"},"Events")," package is used including the ",(0,i.kt)("inlineCode",{parentName:"p"},"EventRecorder")," to record these events."),(0,i.kt)("p",null,"To configure receiving the recorded events on a specific host, this can be provided via the ",(0,i.kt)("inlineCode",{parentName:"p"},"--events-addr")," flag in ",(0,i.kt)("inlineCode",{parentName:"p"},"RUN_ARGS")," when starting the controller. This can be any HTTP endpoint."),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fluxcd/pkg/blob/main/apis/event/v1beta1/event.go"},"fluxcd event")," for the struct of the event created."),(0,i.kt)("div",{className:"footnotes"},(0,i.kt)("hr",{parentName:"div"}),(0,i.kt)("ol",{parentName:"div"},(0,i.kt)("li",{parentName:"ol",id:"fn-yaml"},"These are written as YAML mappings",(0,i.kt)("a",{parentName:"li",href:"#fnref-yaml",className:"footnote-backref"},"\u21a9")),(0,i.kt)("li",{parentName:"ol",id:"fn-sprig"},'The following functions are removed "env", "expandenv", "getHostByName", "genPrivateKey", "derivePassword", "sha256sum", "base", "dir", "ext", "clean", "isAbs", "osBase", "osDir", "osExt", "osClean", "osIsAbs"',(0,i.kt)("a",{parentName:"li",href:"#fnref-sprig",className:"footnote-backref"},"\u21a9")))))}u.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(n),c=i,g=u["".concat(s,".").concat(c)]||u[c]||d[c]||r;return n?a.createElement(g,l(l({ref:t},m),{},{components:n})):a.createElement(g,l({ref:t},m))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"}}]);