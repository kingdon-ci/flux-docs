"use strict";(self.webpackChunkweave_gitops_docs=self.webpackChunkweave_gitops_docs||[]).push([[84169],{98492:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var o=r(87462),n=(r(67294),r(3905));const a={title:"Provision resources and auto approve",hide_title:!0},i="Use TF-controller to provision resources and auto approve",s={unversionedId:"terraform/using-terraform-cr/provision-resources-and-auto-approve",id:"version-0.18.0/terraform/using-terraform-cr/provision-resources-and-auto-approve",title:"Provision resources and auto approve",description:"TF-controller is a tool that allows you to manage infrastructure as code using Terraform,",source:"@site/versioned_docs/version-0.18.0/terraform/using-terraform-cr/provision-resources-and-auto-approve.mdx",sourceDirName:"terraform/using-terraform-cr",slug:"/terraform/using-terraform-cr/provision-resources-and-auto-approve",permalink:"/docs/0.18.0/terraform/using-terraform-cr/provision-resources-and-auto-approve",draft:!1,editUrl:"https://github.com/weaveworks/weave-gitops/edit/main/website/versioned_docs/version-0.18.0/terraform/using-terraform-cr/provision-resources-and-auto-approve.mdx",tags:[],version:"0.18.0",frontMatter:{title:"Provision resources and auto approve",hide_title:!0},sidebar:"docs",previous:{title:"Get Started",permalink:"/docs/0.18.0/terraform/get-started"},next:{title:"Plan and manually apply Terraform resources",permalink:"/docs/0.18.0/terraform/using-terraform-cr/plan-and-manually-apply-terraform-resources"}},l={},p=[{value:"Create a Terraform object",id:"create-a-terraform-object",level:2},{value:"GitOps Automation Mode",id:"gitops-automation-mode",level:2},{value:"Example",id:"example",level:2}],u={toc:p};function c(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"use-tf-controller-to-provision-resources-and-auto-approve"},"Use TF-controller to provision resources and auto approve"),(0,n.kt)("p",null,"TF-controller is a tool that allows you to manage infrastructure as code using Terraform,\na popular infrastructure as code tool, within a Kubernetes cluster.\nWith TF-controller, you can define your infrastructure in a declarative way and have\nit automatically managed and updated. In this guide, we will walk through the steps of\nsetting up and using TF-controller to provision resources, as well as setting it up to automatically approve changes."),(0,n.kt)("h2",{id:"create-a-terraform-object"},"Create a Terraform object"),(0,n.kt)("p",null,"To get started with using TF-controller, the first step is to prepare the necessary objects.\nThis includes creating a Terraform object and a Flux source object."),(0,n.kt)("p",null,"The Terraform object is a Kubernetes custom resource (CR) that defines\nthe Terraform module, backend configuration, and GitOps automation mode.\nThe Terraform module is the configuration used to provision resources\nand can be stored in a Git repository or packaged in an OCI image in an OCI registry."),(0,n.kt)("p",null,"The backend configuration is optional and sets the backend to be used to store the Terraform state.\nIf not specified, the Kubernetes backend will be used by default."),(0,n.kt)("p",null,'The GitOps automation mode is also optional, with the default being "plan-and-manually-apply".\nIn this example, we\'ll use the "auto-apply" mode.'),(0,n.kt)("p",null,"The Flux source object is a source of configuration files,\nsuch as a Git repository or OCI registry. It tells TF-controller where to find the Terraform module\nand any other necessary configuration files.\nThere are several types of Flux source objects available, including ",(0,n.kt)("inlineCode",{parentName:"p"},"GitRepository")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"OCIRepository"),".\nChoose the one that best fits your needs."),(0,n.kt)("p",null,"Once you have prepared these objects, you are ready to start using TF-controller to manage your infrastructure."),(0,n.kt)("h2",{id:"gitops-automation-mode"},"GitOps Automation Mode"),(0,n.kt)("p",null,'In TF-controller, the GitOps automation mode determines how Terraform runs and manages your infrastructure.\nThere are several options available for the GitOps automation mode, including "plan-and-manually-apply" and "auto-apply".'),(0,n.kt)("p",null,'In the "plan-and-manually-apply" mode,\nTF-controller will run a Terraform plan and output the proposed changes to a Git repository.\nA human must then review and manually apply the changes.\nThis is the default GitOps automation mode if none is specified.'),(0,n.kt)("p",null,'In the "auto-apply" mode, TF-controller will automatically apply the changes after a Terraform plan is run.\nThis can be useful for environments where changes can be made automatically,\nbut it is important to ensure that the proper controls, like policies, are in place to prevent unintended changes\nfrom being applied.'),(0,n.kt)("p",null,"To specify the GitOps automation mode in a Terraform object,\nyou can set the ",(0,n.kt)("inlineCode",{parentName:"p"},"spec.approvePlan"),' field to the desired value. For example, to use the "auto-apply" mode, y\nou would set it to ',(0,n.kt)("inlineCode",{parentName:"p"},"spec.approvePlan: auto"),"."),(0,n.kt)("p",null,"It is important to carefully consider which GitOps automation mode is appropriate for your use case to ensure that\nyour infrastructure is properly managed and controlled."),(0,n.kt)("h2",{id:"example"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"{8}","{8}":!0},"apiVersion: infra.contrib.fluxcd.io/v1alpha1\nkind: Terraform\nmetadata:\n  name: helloworld\nspec:\n  path: ./helloworld\n  interval: 10m\n  approvePlan: auto\n  sourceRef:\n    kind: GitRepository\n    name: helloworld\n")),(0,n.kt)("p",null,"This code is defining a ",(0,n.kt)("inlineCode",{parentName:"p"},"Terraform")," object in Kubernetes.\nThe ",(0,n.kt)("inlineCode",{parentName:"p"},"apiVersion")," field specifies the version of the Kubernetes API being used,\nand the ",(0,n.kt)("inlineCode",{parentName:"p"},"kind")," field specifies that it is a ",(0,n.kt)("inlineCode",{parentName:"p"},"Terraform")," object.\nThe ",(0,n.kt)("inlineCode",{parentName:"p"},"metadata")," block contains information about the object, including its ",(0,n.kt)("inlineCode",{parentName:"p"},"name"),"."),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"spec")," field contains the specification for the ",(0,n.kt)("inlineCode",{parentName:"p"},"Terraform")," object.\nThe ",(0,n.kt)("inlineCode",{parentName:"p"},"path"),' field specifies the path to the Terraform configuration files,\nin this case a directory named "helloworld".\nThe ',(0,n.kt)("inlineCode",{parentName:"p"},"interval")," field specifies the frequency at which TF-controller should run the Terraform configuration,\nin this case every 10 minutes. The ",(0,n.kt)("inlineCode",{parentName:"p"},"approvePlan")," field specifies whether or not\nto automatically approve the changes proposed by a Terraform plan.\nIn this case, it is set to ",(0,n.kt)("inlineCode",{parentName:"p"},"auto"),", meaning that changes will be automatically approved."),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"sourceRef")," field specifies the Flux source object to be used.\nIn this case, it is a ",(0,n.kt)("inlineCode",{parentName:"p"},"GitRepository"),' object with the name "helloworld".\nThis indicates that the Terraform configuration is stored in a Git repository object with the name ',(0,n.kt)("inlineCode",{parentName:"p"},"helloworld"),"."))}c.isMDXComponent=!0},3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var o=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=o.createContext({}),p=function(e){var t=o.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(r),m=n,f=c["".concat(l,".").concat(m)]||c[m]||d[m]||a;return r?o.createElement(f,i(i({ref:t},u),{},{components:r})):o.createElement(f,i({ref:t},u))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:n,i[1]=s;for(var p=2;p<a;p++)i[p]=r[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}m.displayName="MDXCreateElement"}}]);