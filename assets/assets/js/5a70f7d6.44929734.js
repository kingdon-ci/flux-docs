"use strict";(self.webpackChunkweave_gitops_docs=self.webpackChunkweave_gitops_docs||[]).push([[84323],{45118:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const s={title:"Service Account permissions"},i=void 0,o={unversionedId:"configuration/service-account-permissions",id:"version-0.17.0/configuration/service-account-permissions",title:"Service Account permissions",description:"This is an explanation of the kubernetes permissions",source:"@site/versioned_docs/version-0.17.0/configuration/service-account-permissions.mdx",sourceDirName:"configuration",slug:"/configuration/service-account-permissions",permalink:"/docs/0.17.0/configuration/service-account-permissions",draft:!1,editUrl:"https://github.com/weaveworks/weave-gitops/edit/main/website/versioned_docs/version-0.17.0/configuration/service-account-permissions.mdx",tags:[],version:"0.17.0",frontMatter:{title:"Service Account permissions"},sidebar:"docs",previous:{title:"Securing access to the dashboard",permalink:"/docs/0.17.0/configuration/securing-access-to-the-dashboard"},next:{title:"User permissions",permalink:"/docs/0.17.0/configuration/user-permissions"}},c={},l=[{value:"The Helm values",id:"the-helm-values",level:2},{value:"Impersonation",id:"impersonation",level:2},{value:"Configuring impersonation",id:"configuring-impersonation",level:3},{value:"Get namespaces",id:"get-namespaces",level:2},{value:"Reading the cluster-user-auth and oidc-auth secrets",id:"reading-the-cluster-user-auth-and-oidc-auth-secrets",level:2},{value:"Configuring secrets",id:"configuring-secrets",level:3}],u={toc:l};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This is an explanation of the ",(0,a.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/reference/access-authn-authz/rbac/"},"kubernetes permissions"),"\nused by the Weave GitOps service account. This is the service account used by\nthe application itself (rather than the static user used for demo/emergency\naccess, the permissions for which are covered in the ",(0,a.kt)("a",{parentName:"p",href:"/docs/0.17.0/configuration/user-permissions"},"static user permissions"),"\npage)"),(0,a.kt)("p",null,"The default permissions of the service account are defined in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/weaveworks/weave-gitops/tree/main/charts/gitops-server/templates/role.yaml"},"helm chart")," which\nwill generate a cluster role with the following permissions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'rules:\n# Used to query the cluster\n- apiGroups: [""]\n  resources:  ["users", "groups"]  # set by rbac.impersonationResources\n  verbs: [ "impersonate" ]\n  # resourceNames: []              # set by rbac.impersonationResourceNames\n# Used to get OIDC/static user credentials for login\n- apiGroups: [""]\n  resources: [ "secrets" ]\n  verbs: [ "get", "list" ]\n  resourceNames:                  # set by rbac.viewSecretsResourceNames\n    - "cluster-user-auth"\n    - "oidc-auth"\n# The service account needs to read namespaces to know where it can query\n- apiGroups: [ "" ]\n  resources: [ "namespaces" ]\n  verbs: [ "get", "list" ]\n')),(0,a.kt)("p",null,"These allow the pod to do three things:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/reference/access-authn-authz/authentication/#user-impersonation"},"impersonate")," the user and operate in cluster as them"),(0,a.kt)("li",{parentName:"ul"},"read the available namespaces (this is required to understand the users' permissions)"),(0,a.kt)("li",{parentName:"ul"},"read the ",(0,a.kt)("inlineCode",{parentName:"li"},"cluster-user-auth")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"oidc-auth")," secrets, which are the default secrets\nto store the cluster-user account and OIDC configuration (see\n",(0,a.kt)("a",{parentName:"li",href:"/docs/0.17.0/configuration/securing-access-to-the-dashboard"},"securing access to the dashboard"),")")),(0,a.kt)("h2",{id:"the-helm-values"},"The Helm values"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Value"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"rbac.impersonationResources")),(0,a.kt)("td",{parentName:"tr",align:null},"Which resource types the service account can impersonate"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},'["users", "groups"]'))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"rbac.impersonationResourceNames")),(0,a.kt)("td",{parentName:"tr",align:null},"Specific users, groups or services account that can be impersonated"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"[]"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"rbac.viewSecretsResourceNames")),(0,a.kt)("td",{parentName:"tr",align:null},"Specific secrets that can be read"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},'["cluster-user-auth", "oidc-auth"]'))))),(0,a.kt)("h2",{id:"impersonation"},"Impersonation"),(0,a.kt)("p",null,"The primary way Weave GitOps queries the Kube API is via ",(0,a.kt)("inlineCode",{parentName:"p"},"impersonation"),", the\napplication (not the cluster) authenticates the user (either via the static\ncluster-user credentials or OIDC) then makes calls to the Kube API on the user's\nbehalf. This is equivalent to making a kubectl call like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl get deployments --as aisha@example.com\n")),(0,a.kt)("p",null,"Assuming the user ",(0,a.kt)("inlineCode",{parentName:"p"},"aisha@example.com")," has been granted permissions to get\ndeployments within the cluster then this will return them. The same occurs\nwithin the application. This makes the proper configuration of the application's\npermissions very important as, without proper restrictions it can impersonate\nvery powerful ",(0,a.kt)("inlineCode",{parentName:"p"},"users")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"groups"),". For example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"system:masters")," is group\nis generally bound to the ",(0,a.kt)("inlineCode",{parentName:"p"},"cluster-admin")," role which can do anything."),(0,a.kt)("p",null,"For more details of the permissions needed by the user or group see the\n",(0,a.kt)("a",{parentName:"p",href:"/docs/0.17.0/configuration/user-permissions"},"user permissions")," guide."),(0,a.kt)("h3",{id:"configuring-impersonation"},"Configuring impersonation"),(0,a.kt)("p",null,"It is highly recommended that you limit which users and groups that the\napplication can impersonate by setting ",(0,a.kt)("inlineCode",{parentName:"p"},"rbac.impersonationResourceNames")," in\nthe Helm chart's ",(0,a.kt)("inlineCode",{parentName:"p"},"values"),". e.g.:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'rbac:\n  impersonationResources: ["groups"]\n  impersonationResourceNames:\n    - admin\n    - dev-team\n    - qa-team\n')),(0,a.kt)("p",null,"In this example the application can only impersonate the groups admin, dev-team\nand qa-team (this also, implicitly disables the static cluster-user)."),(0,a.kt)("p",null,"Unfortunately not all OIDC providers support groups so you may need to\nmanually enumerate users, for example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'rbac:\n  impersonationResources: ["users"]\n  impersonationResourceNames:\n    - aisha@example.com\n    - bill@example.com\n    - wego-admin         # enable the static cluster-user\n')),(0,a.kt)("p",null,"A better, albeit more involved, solution is to set up an OIDC connector like\n",(0,a.kt)("a",{parentName:"p",href:"/docs/0.17.0/guides/setting-up-dex"},"Dex")," and use that to manage groups for you."),(0,a.kt)("h2",{id:"get-namespaces"},"Get namespaces"),(0,a.kt)("p",null,"The application itself uses get namespace permissions to pre-cache the list of\navailable namespaces. As the user accesses resources their permissions within\nvarious namespaces is also cached to speed up future operations."),(0,a.kt)("h2",{id:"reading-the-cluster-user-auth-and-oidc-auth-secrets"},"Reading the cluster-user-auth and oidc-auth secrets"),(0,a.kt)("p",null,"The cluster-user-auth and oidc-auth secrets provide information for authenticating\nto the application. The former holds the username and bcrypt-hashed password\nfor the static user and the later holds OIDC configuration."),(0,a.kt)("p",null,"The application needs to be able to access these secrets in order to\nauthenticate users."),(0,a.kt)("h3",{id:"configuring-secrets"},"Configuring secrets"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"rbac.viewSecretsResourceNames")," value allows the operator to change which secrets the\napplication can read. This is mostly so that, if the static user is not\nconfigured, that secret can be removed; or if the secret to be used is re-named."))}p.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=l(n),h=a,d=p["".concat(c,".").concat(h)]||p[h]||m[h]||s;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=h;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[p]="string"==typeof e?e:a,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"}}]);