"use strict";(self.webpackChunkweave_gitops_docs=self.webpackChunkweave_gitops_docs||[]).push([[43781],{37536:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(67294),r=a(88746);a(52426);const i={fontSize:16,marginLeft:4,fontVariant:"all-small-caps"};function s(e){let{tiers:t}=e;return n.createElement(r.Z,{title:`This feature is a available on ${t}.`,style:i},t)}},52043:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>N,contentTitle:()=>b,default:()=>C,frontMatter:()=>f,metadata:()=>v,toc:()=>y});var n=a(87462),r=a(67294),i=a(3905),s=a(71125),o=a(32342),l=a(37536),p=a(77823),u=a(19666);function c(e){let{localPath:t,hostedPath:a,content:n}=e;return r.createElement(r.Fragment,null,r.createElement(u.Z,null,(()=>r.createElement(p.Z,{className:"language-bash"},"curl -o ",t," ",window.location.protocol,"//",window.location.host,a))),r.createElement(p.Z,{title:t,className:"language-yaml"},n))}var d=a(74354),m=a(17779),h=a(87585),g=a(65719);const k=a.p+"assets/files/example-enterprise-helm-137984942127ddce028d014dde5b973a.yaml",f={title:"Install Weave GitOps Enterprise",hide_title:!0,pagination_next:"enterprise/getting-started/releases-enterprise"},b='Install Weave GitOps Enterprise<TierLabel tiers="Enterprise" />',v={unversionedId:"enterprise/getting-started/install-enterprise",id:"version-0.35.0/enterprise/getting-started/install-enterprise",title:"Install Weave GitOps Enterprise",description:"To purchase an entitlement to Weave GitOps Enterprise, please contact sales@weave.works.",source:"@site/versioned_docs/version-0.35.0/enterprise/getting-started/install-enterprise.mdx",sourceDirName:"enterprise/getting-started",slug:"/enterprise/getting-started/install-enterprise",permalink:"/docs/0.35.0/enterprise/getting-started/install-enterprise",draft:!1,editUrl:"https://github.com/weaveworks/weave-gitops/edit/main/website/versioned_docs/version-0.35.0/enterprise/getting-started/install-enterprise.mdx",tags:[],version:"0.35.0",frontMatter:{title:"Install Weave GitOps Enterprise",hide_title:!0,pagination_next:"enterprise/getting-started/releases-enterprise"},sidebar:"docs",previous:{title:"Introduction to Weave GitOps Enterprise",permalink:"/docs/0.35.0/enterprise/getting-started/intro-enterprise"},next:{title:"Enterprise Releases",permalink:"/docs/0.35.0/enterprise/getting-started/releases-enterprise"}},N={},y=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Install the Weave GitOps Enterprise CLI Tool",id:"install-the-weave-gitops-enterprise-cli-tool",level:3},{value:"Install Flux Onto Your Cluster with the <code>flux bootstrap</code> Command",id:"install-flux-onto-your-cluster-with-the-flux-bootstrap-command",level:3},{value:"Apply Your Entitlements Secret to Your Cluster",id:"apply-your-entitlements-secret-to-your-cluster",level:3},{value:"Set up Authentication and RBAC",id:"set-up-authentication-and-rbac",level:2},{value:"Securing Access to the Dashboard",id:"securing-access-to-the-dashboard",level:3},{value:"Customization",id:"customization",level:4},{value:"Scopes",id:"scopes",level:4},{value:"Claims",id:"claims",level:4},{value:"Configuring OIDC with Dex and GitHub",id:"configuring-oidc-with-dex-and-github",level:4},{value:"Deploy Dex",id:"deploy-dex",level:4},{value:"Set up a Static User",id:"set-up-a-static-user",level:4},{value:"OIDC Login",id:"oidc-login",level:4},{value:"Configuring the Emergency User",id:"configuring-the-emergency-user",level:4},{value:"Updating the Emergency User",id:"updating-the-emergency-user",level:4},{value:"User Permissions",id:"user-permissions",level:4},{value:"GitOps Dashboard Service Account Permissions",id:"gitops-dashboard-service-account-permissions",level:3},{value:"Impersonation",id:"impersonation",level:4},{value:"Get Namespaces",id:"get-namespaces",level:4},{value:"Reading the <code>cluster-user-auth</code> and <code>oidc-auth</code> Secrets",id:"reading-the-cluster-user-auth-and-oidc-auth-secrets",level:4},{value:"User Permissions",id:"user-permissions-1",level:3},{value:"Flux Resources",id:"flux-resources",level:4},{value:"Resources Managed via Flux",id:"resources-managed-via-flux",level:4},{value:"Feedback from Flux",id:"feedback-from-flux",level:4},{value:"Login UI",id:"login-ui",level:3},{value:"Recommended RBAC Configuration",id:"recommended-rbac-configuration",level:2},{value:"Example Setup",id:"example-setup",level:3},{value:"Code",id:"code",level:3},{value:"Configure Access for Writing to Git from the Weave GitOps Enterprise UI",id:"configure-access-for-writing-to-git-from-the-weave-gitops-enterprise-ui",level:2},{value:"TLS Configuration",id:"tls-configuration",level:2},{value:"Configure Helm Chart and Commit",id:"configure-helm-chart-and-commit",level:2},{value:"<code>values.config.capi.repositoryURL</code>",id:"valuesconfigcapirepositoryurl",level:4},{value:"<code>values.config.capi.repositoryPath</code>",id:"valuesconfigcapirepositorypath",level:4},{value:"<code>values.config.capi.repositoryClustersPath</code>",id:"valuesconfigcapirepositoryclusterspath",level:4},{value:"Configure Your Password",id:"configure-your-password",level:2},{value:"(Optional) Install Policy Agent",id:"optional-install-policy-agent",level:3},{value:"Next Steps",id:"next-steps",level:2}],w={toc:y};function C(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},w,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"install-weave-gitops-enterprise"},"Install Weave GitOps Enterprise",(0,i.kt)(l.Z,{tiers:"Enterprise",mdxType:"TierLabel"})),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"To purchase an entitlement to Weave GitOps Enterprise, please contact ",(0,i.kt)("a",{parentName:"p",href:"mailto:sales@weave.works"},"sales@weave.works"),".")),(0,i.kt)("p",null,"Follow the instructions on this page to:"),(0,i.kt)(g.Z,{toc:(()=>{const e=y.slice(y.findIndex((e=>"install-weave-gitops-enterprise"==e.id))+1);return e.slice(0,e.findIndex((e=>"4"==e.level)))})(),mdxType:"TOCInline"}),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"There is no need to install the open source version of Weave GitOps before installing Weave GitOps Enterprise.")),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"To get up and running with Weave GitOps Enterprise:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"create a Kubernetes cluster"),(0,i.kt)("li",{parentName:"ul"},"add your cluster to kubeconfig\u2014which you'll get from Kubernetes\u2014so that the kubeconfig correctly points to the management cluster"),(0,i.kt)("li",{parentName:"ul"},"create a Git repository; in the instructions below, we refer to a ",(0,i.kt)("inlineCode",{parentName:"li"},"fleet-infra")," repository"),(0,i.kt)("li",{parentName:"ul"},"configure your Git client properly (if using GitHub, for example,\nthen review their docs on ",(0,i.kt)("a",{parentName:"li",href:"https://docs.github.com/en/get-started/getting-started-with-git/setting-your-username-in-git#setting-your-git-username-for-every-repository-on-your-computer"},"setting your username")," and\n",(0,i.kt)("a",{parentName:"li",href:"https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-email-preferences/setting-your-commit-email-address#setting-your-email-address-for-every-repository-on-your-computer"},"your email address"),")"),(0,i.kt)("li",{parentName:"ul"},"obtain a valid entitlement secret from Weaveworks and apply it to your cluster"),(0,i.kt)("li",{parentName:"ul"},"install a compatible version of Flux onto your cluster; see below for how-to guidance")),(0,i.kt)("h3",{id:"install-the-weave-gitops-enterprise-cli-tool"},"Install the Weave GitOps Enterprise CLI Tool"),(0,i.kt)("p",null,"To do this, you can use either brew or curl."),(0,i.kt)(s.Z,{groupId:"weave-gitops-cli",default:"homebrew",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"homebrew",label:"Homebrew",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"brew install weaveworks/tap/gitops-ee\n"))),(0,i.kt)(o.Z,{value:"curl",label:"curl",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'export VERSION=<VERSION>\ncurl --silent --location "https://artifacts.wge.dev.weave.works/releases/bin/${VERSION}/gitops-$(uname)-$(uname -m).tar.gz" | tar xz -C /tmp\nsudo mv /tmp/gitops /usr/local/bin\ngitops version\n')))),(0,i.kt)("h3",{id:"install-flux-onto-your-cluster-with-the-flux-bootstrap-command"},"Install Flux Onto Your Cluster with the ",(0,i.kt)("inlineCode",{parentName:"h3"},"flux bootstrap")," Command"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"flux bootstrap")," command enables you to deploy Flux on a cluster the GitOps way. Go ",(0,i.kt)("a",{parentName:"p",href:"https://fluxcd.io/docs/cmd/"},"here")," for more information about the command."),(0,i.kt)(s.Z,{groupId:"infrastructure",default:!0,mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"github",label:"GitHub",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"flux bootstrap github \\\n  --owner=<github username> \\\n  --repository=fleet-infra \\\n  --branch=main \\\n  --path=./clusters/management \\\n  --personal \\\n  --components-extra image-reflector-controller,image-automation-controller\n"))),(0,i.kt)(o.Z,{value:"gitlab",label:"GitLab",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"flux bootstrap gitlab \\\n  --owner=<gitlab username> \\\n  --repository=fleet-infra \\\n  --branch=main \\\n  --path=./clusters/management \\\n  --personal \\\n  --components-extra image-reflector-controller,image-automation-controller\n")))),(0,i.kt)("p",null,"Your private Git repo should have a clusters/management folder that includes the manifests Flux needs to operate, and that also generates a key value pair for Flux to access the repo. "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"owner"),": The username (or organization) of the Git repository"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"repository"),": Git repository name"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"branch"),': Git branch (default "main")'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"path"),": Path relative to the repository root; when specified, the cluster sync will be scoped to this path"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"personal"),": If set, the owner is assumed to be a repo user"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"components-extra"),": Additional controllers to install")),(0,i.kt)("p",null,"At this point your Flux management cluster should be running. Take a look at the repository you created earlier."),(0,i.kt)("h3",{id:"apply-your-entitlements-secret-to-your-cluster"},"Apply Your Entitlements Secret to Your Cluster"),(0,i.kt)("p",null,"As noted above, you receive your entitlements secret by contacting ",(0,i.kt)("a",{parentName:"p",href:"mailto:sales@weave.works."},"sales@weave.works.")," Use this command to apply it to the cluster:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f entitlements.yaml\n")),(0,i.kt)("h2",{id:"set-up-authentication-and-rbac"},"Set up Authentication and RBAC"),(0,i.kt)("h3",{id:"securing-access-to-the-dashboard"},"Securing Access to the Dashboard"),(0,i.kt)("p",null,"There are two supported methods for logging in to the dashboard, that work with standard Kubernetes RBAC:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Login via an OIDC provider: recommended, as this will allow you to control permissions for existing users and groups that have\nalready been configured to use OIDC. OIDC decouples the need to manage user lists from the application, allowing it to be managed via\na central system designed for that purpose (i.e. the OIDC provider). OIDC also enables the creation of groups\u2014either via your provider's own systems or by using a connector like ",(0,i.kt)("a",{parentName:"li",href:"#configuring-oidc-with-dex-and-github"},"Dex"),"."),(0,i.kt)("li",{parentName:"ul"},"Login via a cluster user account: which is insecure, and which we only recommend for local and development environments or if you need to activate emergency access to a damaged cluster. However, it is an option if an OIDC provider is not available.")),(0,i.kt)("p",null,"You may decide to give your engineering teams access to the WGE dashboard so they can view and manage their workloads. In this case, you will want to secure dashboard access and restrict who can interact with it. Weave GitOps Enterprise integrates with your OIDC provider and uses standard Kubernetes RBAC to give you fine-grained control of the dashboard users' permissions."),(0,i.kt)("p",null,"OIDC extends the OAuth2 authorization protocol by including an additional field (ID Token) that contains information (claims) about a user's identity. After a user successfully authenticates with the OIDC provider, Weave GitOps Enterprise uses this information to impersonate the user in any calls to the Kubernetes API. This allows cluster administrators to use RBAC rules to control access to the cluster and the dashboard."),(0,i.kt)(s.Z,{groupId:"infrastructure",default:!0,mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"Login via an OIDC provider",label:"Login via an OIDC provider",mdxType:"TabItem"},(0,i.kt)("p",null,"To login via your OIDC provider, create a Kubernetes secret to store the OIDC configuration. This configuration consists of the following parameters:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"issuerURL")),(0,i.kt)("td",{parentName:"tr",align:null},"The URL of the issuer; typically, the discovery URL without a path"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"clientID")),(0,i.kt)("td",{parentName:"tr",align:null},"The client ID set up for Weave GitOps in the issuer"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"clientSecret")),(0,i.kt)("td",{parentName:"tr",align:null},"The client secret set up for Weave GitOps in the issuer"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"redirectURL")),(0,i.kt)("td",{parentName:"tr",align:null},"The redirect URL set up for Weave GitOps in the issuer\u2014typically the dashboard URL, followed by ",(0,i.kt)("inlineCode",{parentName:"td"},"/oauth2/callback ")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"tokenDuration")),(0,i.kt)("td",{parentName:"tr",align:null},"The time duration that the ID Token will remain valid after successful authentication"),(0,i.kt)("td",{parentName:"tr",align:null},'"1h0m0s"')),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"tokenDuration")),(0,i.kt)("td",{parentName:"tr",align:null},"The time duration that the ID Token will remain valid after successful authentication"),(0,i.kt)("td",{parentName:"tr",align:null},'"1h0m0s"')),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"oidcUsernamePrefix")),(0,i.kt)("td",{parentName:"tr",align:null},"The prefix added to users when impersonating API calls to the Kubernetes API, equivalent to --oidc-username-prefix"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"oidcGroupsPrefix")),(0,i.kt)("td",{parentName:"tr",align:null},"The prefix added to groups when impersonating API calls to the Kubernetes API, equivalent to --oidc-groups-prefix"),(0,i.kt)("td",{parentName:"tr",align:null})))),(0,i.kt)("p",null,"Ensure that your OIDC provider has been set up with a client ID/secret and the dashboard's redirect URL."),(0,i.kt)("p",null,"Create a secret named ",(0,i.kt)("inlineCode",{parentName:"p"},"oidc-auth")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"flux-system")," namespace with these parameters set:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl create secret generic oidc-auth \\\n  --namespace flux-system \\\n  --from-literal=issuerURL=<oidc-issuer-url> \\\n  --from-literal=clientID=<client-id> \\\n  --from-literal=clientSecret=<client-secret> \\\n  --from-literal=redirectURL=<redirect-url> \\\n  --from-literal=tokenDuration=<token-duration>\n")),(0,i.kt)("p",null,"Once the HTTP server starts, unauthenticated users will have to click 'Login With OIDC Provider' to log in or use the cluster account (if configured). Upon successful authentication, the users' identities will be impersonated in any calls made to the Kubernetes API, as part of any action they take in the dashboard. By default the Helm chart will configure RBAC correctly, but we recommend reading the ",(0,i.kt)("a",{parentName:"p",href:"#gitops-dashboard-service-account-permissions"},"service account")," and ",(0,i.kt)("a",{parentName:"p",href:"#user-permissions"},"user permissions")," pages to understand which actions are needed for Weave GitOps to function correctly."),(0,i.kt)("h4",{id:"customization"},"Customization"),(0,i.kt)("p",null,"For some OIDC configurations, you may need to customise the requested ",(0,i.kt)("a",{parentName:"p",href:"https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims"},"scopes")," or ",(0,i.kt)("a",{parentName:"p",href:"https://openid.net/specs/openid-connect-core-1_0.html#Claims"},"claims"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"oidcUsernamePrefix")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"oidcGroupsPrefix")," work in the same way as the Kubernetes ",(0,i.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/"},"kube-apiserver")," command-line options, if you need them for Kubernetes, you will likely need them here."),(0,i.kt)("h4",{id:"scopes"},"Scopes"),(0,i.kt)("p",null,'By default, the following scopes are requested: "openid","offline_access","email","groups".'),(0,i.kt)("p",null,'The "openid" scope is ',(0,i.kt)("strong",{parentName:"p"},"mandatory"),' for OpenID auth and will be added if not provided. The "email" and "groups" scopes are commonly used as unique identifiers in organisations.'),(0,i.kt)("p",null,'"offline_access" allows us to refresh OIDC tokens to keep login sessions alive for as long as a refresh token is valid. You can, however, change the defaults.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl create secret generic oidc-auth \\\n  --namespace flux-system \\\n  --from-literal=issuerURL=<oidc-issuer-url> \\\n  --from-literal=clientID=<client-id> \\\n  --from-literal=clientSecret=<client-secret> \\\n  --from-literal=redirectURL=<redirect-url> \\\n  --from-literal=tokenDuration=<token-duration> \\\n  --from-literal=customScopes=custom,scopes\n")),(0,i.kt)("p",null,"The format for the ",(0,i.kt)("inlineCode",{parentName:"p"},"customScopes"),' key is a comma-separated list of scopes to request. In this case, "custom", "scopes", and "openid" would be requested.'),(0,i.kt)("h4",{id:"claims"},"Claims"),(0,i.kt)("p",null,"By default, the following claims are parsed from the OpenID ",(0,i.kt)("a",{parentName:"p",href:"https://openid.net/specs/openid-connect-core-1_0.html#CodeIDToken"},"ID Token"),' "email" and "groups". These are presented as the ',(0,i.kt)("inlineCode",{parentName:"p"},"user")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"groups")," when WGE communicates with your Kubernetes API server."),(0,i.kt)("p",null,"This is equivalent to ",(0,i.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/reference/access-authn-authz/authentication/#configuring-the-api-server"},"configuring")," your ",(0,i.kt)("inlineCode",{parentName:"p"},"kube-apiserver")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"--oidc-username-claim=email --oidc-groups-claim=groups"),"."),(0,i.kt)("p",null,"Again, you can configure these from the ",(0,i.kt)("inlineCode",{parentName:"p"},"oidc-auth")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Secret"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl create secret generic oidc-auth \\\n  --namespace flux-system \\\n  --from-literal=issuerURL=<oidc-issuer-url> \\\n  --from-literal=clientID=<client-id> \\\n  --from-literal=clientSecret=<client-secret> \\\n  --from-literal=redirectURL=<redirect-url> \\\n  --from-literal=tokenDuration=<token-duration> \\\n  --from-literal=claimUsername=sub \\\n  --from-literal=claimGroups=groups\n")),(0,i.kt)("p",null,"There are two separate configuration keys. You can override them separately. They should match your ",(0,i.kt)("inlineCode",{parentName:"p"},"kube-apiserver")," configuration.")),(0,i.kt)(o.Z,{value:"Configuring OIDC with Dex and GitHub",label:"Configuring OIDC with Dex and GitHub",mdxType:"TabItem"},(0,i.kt)("h4",{id:"configuring-oidc-with-dex-and-github"},"Configuring OIDC with Dex and GitHub"),(0,i.kt)("p",null,"This example uses ",(0,i.kt)("a",{parentName:"p",href:"https://dexidp.io/"},"Dex")," and its ",(0,i.kt)("a",{parentName:"p",href:"https://dexidp.io/docs/connectors/github/"},"GitHub connector")," to show you how to log in to the Weave GitOps dashboard by authenticating with your GitHub account. It assumes you have already installed Weave GitOps on a Kubernetes cluster, per the instructions above, and have also ",(0,i.kt)("a",{parentName:"p",href:"#tls-configuration"},"enabled TLS"),"."),(0,i.kt)("p",null,"Dex is an identity service that uses ",(0,i.kt)("a",{parentName:"p",href:"https://openid.net/connect/"},"OpenID Connect")," to\ndrive authentication for other apps. There are other solutions for identity and access management, such as ",(0,i.kt)("a",{parentName:"p",href:"https://www.keycloak.org/"},"Keycloak"),"."),(0,i.kt)("p",null,"Create a namespace where you will install Dex:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: dex\n")),(0,i.kt)("p",null,"Get a GitHub ClientID and Client secret by creating a ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app"},"new OAuth application"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"GitHub OAuth configuration",src:a(46776).Z,width:"502",height:"722"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl create secret generic github-client \\\n  --namespace=dex \\\n  --from-literal=client-id=${GITHUB_CLIENT_ID} \\\n  --from-literal=client-secret=${GITHUB_CLIENT_SECRET}\n")),(0,i.kt)("h4",{id:"deploy-dex"},"Deploy Dex"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"HelmRepository")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"HelmRelease")," objects to let Flux deploy everything."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand to see resource manifests"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"---\napiVersion: source.toolkit.fluxcd.io/v1beta1\nkind: HelmRepository\nmetadata:\n  name: dex\n  namespace: dex\nspec:\n  interval: 1m\n  url: https://charts.dexidp.io\n---\napiVersion: helm.toolkit.fluxcd.io/v2beta1\nkind: HelmRelease\nmetadata:\n  name: dex\n  namespace: dex\nspec:\n  interval: 5m\n  chart:\n    spec:\n      chart: dex\n      version: 0.15.3\n      sourceRef:\n        kind: HelmRepository\n        name: dex\n        namespace: dex\n      interval: 1m\n  values:\n    envVars:\n    - name: GITHUB_CLIENT_ID\n      valueFrom:\n        secretKeyRef:\n          name: github-client\n          key: client-id\n    - name: GITHUB_CLIENT_SECRET\n      valueFrom:\n        secretKeyRef:\n          name: github-client\n          key: client-secret\n    config:\n      # Set it to a valid URL\n      issuer: https://dex.dev.example.tld\n\n      # See https://dexidp.io/docs/storage/ for more options\n      storage:\n        type: memory\n\n      staticClients:\n      - name: 'Weave GitOps'\n        id: weave-gitops\n        secret: AiAImuXKhoI5ApvKWF988txjZ+6rG3S7o6X5En\n        redirectURIs:\n        - 'https://localhost:9001/oauth2/callback'\n        - 'https://0.0.0.0:9001/oauth2/callback'\n        - 'http://0.0.0.0:9001/oauth2/callback'\n        - 'http://localhost:4567/oauth2/callback'\n        - 'https://localhost:4567/oauth2/callback'\n        - 'http://localhost:3000/oauth2/callback'\n\n      connectors:\n      - type: github\n        id: github\n        name: GitHub\n        config:\n          clientID: $GITHUB_CLIENT_ID\n          clientSecret: $GITHUB_CLIENT_SECRET\n          redirectURI: https://dex.dev.example.tld/callback\n          orgs:\n          - name: weaveworks\n            teams:\n            - team-a\n            - team-b\n            - QA\n          - name: ww-test-org\n    ingress:\n      enabled: true\n      className: nginx\n      annotations:\n        cert-manager.io/cluster-issuer: letsencrypt-prod\n      hosts:\n        - host: dex.dev.example.tld\n          paths:\n          - path: /\n            pathType: ImplementationSpecific\n      tls:\n        - hosts:\n          - dex.dev.example.tld\n          secretName: dex-dev-example-tld\n"))),(0,i.kt)("p",null,"An important part of the configuration is the ",(0,i.kt)("inlineCode",{parentName:"p"},"orgs")," field on the GitHub\nconnector, which allows you to define groups within a GitHub organisation: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"orgs:\n- name: weaveworks\n  teams:\n  - team-a\n  - team-b\n  - QA\n")),(0,i.kt)("p",null,"In this example, the GitHub organisation is ",(0,i.kt)("inlineCode",{parentName:"p"},"weaveworks")," and all members of the ",(0,i.kt)("inlineCode",{parentName:"p"},"team-a"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"team-b"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"QA")," teams can authenticate. Group membership is added to\nthe user."),(0,i.kt)("p",null,"Based on these groups, we can bind roles to groups:"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand to see group role bindings"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: wego-test-user-read-resources\n  namespace: flux-system\nsubjects:\n  - kind: Group\n    name: weaveworks:QA\n    namespace: flux-system\nroleRef:\n  kind: Role\n  name: wego-admin-role\n  apiGroup: rbac.authorization.k8s.io\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: wego-admin-role\n  namespace: flux-system\nrules:\n  - apiGroups: [""]\n    resources: ["secrets", "pods" ]\n    verbs: [ "get", "list" ]\n  - apiGroups: ["apps"]\n    resources: [ "deployments", "replicasets"]\n    verbs: [ "get", "list" ]\n  - apiGroups: ["kustomize.toolkit.fluxcd.io"]\n    resources: [ "kustomizations" ]\n    verbs: [ "get", "list", "patch" ]\n  - apiGroups: ["helm.toolkit.fluxcd.io"]\n    resources: [ "helmreleases" ]\n    verbs: [ "get", "list", "patch" ]\n  - apiGroups: ["source.toolkit.fluxcd.io"]\n    resources: ["buckets", "helmcharts", "gitrepositories", "helmrepositories", "ocirepositories"]\n    verbs: ["get", "list", "patch"]\n  - apiGroups: [""]\n    resources: ["events"]\n    verbs: ["get", "watch", "list"]\n'))),(0,i.kt)("p",null,"In the same way, we can bind cluster roles to a group:"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand to see group cluster role bindings"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: weaveworks:team-a\nsubjects:\n- kind: Group\n  name: weaveworks:team-a\n  apiGroup: rbac.authorization.k8s.io\nroleRef:\n  kind: ClusterRole\n  name: cluster-admin\n  apiGroup: rbac.authorization.k8s.io\n"))),(0,i.kt)("h4",{id:"set-up-a-static-user"},"Set up a Static User"),(0,i.kt)("p",null,"For a static user, add ",(0,i.kt)("inlineCode",{parentName:"p"},"staticPasswords")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"config"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'spec:\n  values:\n    config:\n      staticPasswords:\n      - email: "admin@example.tld"\n        hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"\n        username: "admin"\n        userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"\n')),(0,i.kt)("p",null,"Generate a static user password via the ",(0,i.kt)("inlineCode",{parentName:"p"},"gitops")," CLI:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'PASSWORD="<your password>"\necho -n $PASSWORD | gitops get bcrypt-hash\n$2a$10$OS5NJmPNEb13UgTOSKnMxOWlmS7mlxX77hv4yAiISvZ71Dc7IuN3q\n')),(0,i.kt)("h4",{id:"oidc-login"},"OIDC Login"),(0,i.kt)("p",null,'Using the "Login with OIDC Provider" button:'),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Login page",src:a(11905).Z,width:"1881",height:"899"})),(0,i.kt)("p",null,"We have to authorize the GitHub OAuth application:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"GitHub OAuth page",src:a(83830).Z,width:"1872",height:"893"})),(0,i.kt)("p",null,"After that, grant access to Dex:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dex grant access",src:a(53563).Z,width:"1872",height:"893"})),(0,i.kt)("p",null,"Now we are logged in with our GitHub user and can see all of the resources we have\naccess to:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"UI logged in",src:a(63429).Z,width:"1872",height:"893"}))),(0,i.kt)(o.Z,{value:"Login via a cluster user account",label:"Login via a cluster user account",mdxType:"TabItem"},(0,i.kt)("admonition",{title:"Important",type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"This is an ",(0,i.kt)("strong",{parentName:"p"},"insecure")," method of securing your dashboard which we only recommend for local\nand development environments, or if you need to activate emergency access to a damaged cluster."),(0,i.kt)("p",{parentName:"admonition"},"Note also that this mechanism only exists for a single user. You will not be able to create multiple users. Weave GitOps does not provide its own authentication mechanism. For secure and fully-featured authentication we ",(0,i.kt)("strong",{parentName:"p"},"strongly recommend")," using an OIDC provider, as described in the other tab.")),(0,i.kt)("h4",{id:"configuring-the-emergency-user"},"Configuring the Emergency User"),(0,i.kt)("p",null,"Before you log in via the emergency user account, you need to generate a bcrypt hash for your chosen password and store it as a secret in Kubernetes. There are several different ways to generate a bcrypt hash. This guide uses ",(0,i.kt)("inlineCode",{parentName:"p"},"gitops get bcrypt-hash")," from our CLI."),(0,i.kt)("p",null,"Generate the password by running:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'PASSWORD="<your password>"\necho -n $PASSWORD | gitops get bcrypt-hash\n$2a$10$OS5NJmPNEb13UgTOSKnMxOWlmS7mlxX77hv4yAiISvZ71Dc7IuN3q\n')),(0,i.kt)("p",null,"Now create a Kubernetes secret to store your chosen username and the password hash:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl create secret generic cluster-user-auth \\\n  --namespace flux-system \\\n  --from-literal=username=wego-admin \\\n  --from-literal=password='$2a$10$OS5NJmPNEb13UTOSKngMxOWlmS7mlxX77hv4yAiISvZ71Dc7IuN3q'\n")),(0,i.kt)("p",null,"You should now be able to login via the cluster user account using your chosen username and password."),(0,i.kt)("h4",{id:"updating-the-emergency-user"},"Updating the Emergency User"),(0,i.kt)("p",null,"To change either the username or the password, recreate the ",(0,i.kt)("inlineCode",{parentName:"p"},"cluster-user-auth"),"\nwith the new details."),(0,i.kt)("p",null,"Only one emergency user can be created this way. To add more users, enable an OIDC provider."),(0,i.kt)("h4",{id:"user-permissions"},"User Permissions"),(0,i.kt)("p",null,"By default, both a ClusterRole and Role are generated for the emergency user.\nBoth have the same permissions, with the former being optional and the latter being\nbound to the ",(0,i.kt)("inlineCode",{parentName:"p"},"flux-system")," namespace (where Flux stores its resources by default).\nThe default set of rules are configured like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'rules:\n  # Flux Resources\n  - apiGroups: ["source.toolkit.fluxcd.io"]\n    resources: [ "buckets", "helmcharts", "gitrepositories", "helmrepositories", "ocirepositories" ]\n    verbs: [ "get", "list", "watch", "patch" ]\n\n  - apiGroups: ["kustomize.toolkit.fluxcd.io"]\n    resources: [ "kustomizations" ]\n    verbs: [ "get", "list", "watch", "patch" ]\n\n  - apiGroups: ["helm.toolkit.fluxcd.io"]\n    resources: [ "helmreleases" ]\n    verbs: [ "get", "list", "watch", "patch" ]\n\n  - apiGroups: [ "notification.toolkit.fluxcd.io" ]\n    resources: [ "providers", "alerts" ]\n    verbs: [ "get", "list", "watch", "patch" ]\n\n  - apiGroups: ["infra.contrib.fluxcd.io"]\n    resources: ["terraforms"]\n    verbs: [ "get", "list", "watch", "patch" ]\n\n  # Read access for all other Kubernetes objects\n  - apiGroups: ["*"]\n    resources: ["*"]\n    verbs: [ "get", "list", "watch" ]\n')),(0,i.kt)("p",null,"These permissions give the emergency user Administrator-level powers. ",(0,i.kt)("strong",{parentName:"p"},"We do not\nadvise leaving it active on production systems"),"."),(0,i.kt)("p",null,"If required, the permissions can be expanded with the ",(0,i.kt)("inlineCode",{parentName:"p"},"rbac.additionalRules")," field in the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/0.35.0/references/helm-reference"},"Helm Chart"),".\nFollow the instructions in the next section in order to configure RBAC correctly."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"To remove the emergency user as a login method, set the following values in the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/0.35.0/references/helm-reference"},"Helm Chart"),":"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"#\nadminUser:\n  create: false\n#\nadditionalArgs:\n- --auth-methods=oidc\n#\n")),(0,i.kt)("p",{parentName:"admonition"},"If you are disabling an already existing emergency user, you will need to\nmanually delete the Kubernetes Secret and any User Roles that were created on\nthe cluster.")))),(0,i.kt)("h3",{id:"gitops-dashboard-service-account-permissions"},"GitOps Dashboard Service Account Permissions"),(0,i.kt)("p",null,"This section covers the service account ",(0,i.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/reference/access-authn-authz/rbac/"},"permissions"),"\nfor the Weave GitOps application, which the WGE UI requires to work. The default permissions will generate a cluster role that includes the permissions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'rules:\n- apiGroups: [""]\n  resources:  ["users", "groups"] \n  verbs: [ "impersonate" ]\n- apiGroups: [""]\n  resources: [ "secrets" ]\n  verbs: [ "get", "list" ]\n- apiGroups: [ "" ]\n  resources: [ "namespaces" ]\n  verbs: [ "get", "list" ]\n')),(0,i.kt)("p",null,"These allow the pod to do three things:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/reference/access-authn-authz/authentication/#user-impersonation"},"Impersonate")," the user and operate in the cluster as them"),(0,i.kt)("li",{parentName:"ul"},"Read the available namespaces; this is required to understand users' permissions"),(0,i.kt)("li",{parentName:"ul"},"Read the ",(0,i.kt)("inlineCode",{parentName:"li"},"cluster-user-auth")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"oidc-auth")," secrets, the default secrets\nto store the emergency cluster user account and OIDC configuration (see\n",(0,i.kt)("a",{parentName:"li",href:"#securing-access-to-the-dashboard"},"securing access to the dashboard"),")")),(0,i.kt)("h4",{id:"impersonation"},"Impersonation"),(0,i.kt)("p",null,"The primary way Weave GitOps queries the Kube API is via ",(0,i.kt)("inlineCode",{parentName:"p"},"impersonation"),". The permissions granted to users and groups that Weave GitOps\ncan impersonate will determine the scope of actions that WGE can take within your cluster. "),(0,i.kt)("p",null,"The application, not the cluster, authenticates the user, either via the ",(0,i.kt)("a",{parentName:"p",href:"#configuring-the-emergency-user"},"emergency\ncluster user")," credentials or OIDC. Then it makes Kube API calls on the user's\nbehalf. This is equivalent to making a kubectl call like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl get deployments --as aisha@example.com\n")),(0,i.kt)("p",null,"Assuming the user ",(0,i.kt)("inlineCode",{parentName:"p"},"aisha@example.com")," has permissions to get\ndeployments within the cluster, this will return those deployments. The same occurs\nwithin the application, so properly configuring application\npermissions is very important. Without proper restrictions the application can impersonate\nvery powerful ",(0,i.kt)("inlineCode",{parentName:"p"},"users")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"groups"),". For example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"system:masters")," is a group\ngenerally bound to the ",(0,i.kt)("inlineCode",{parentName:"p"},"cluster-admin")," role, which can do anything."),(0,i.kt)("h4",{id:"get-namespaces"},"Get Namespaces"),(0,i.kt)("p",null,"The application itself uses get namespace permissions to pre-cache the list of\navailable namespaces. As the user accesses resources their permissions within\nvarious namespaces is also cached to speed up future operations."),(0,i.kt)("h4",{id:"reading-the-cluster-user-auth-and-oidc-auth-secrets"},"Reading the ",(0,i.kt)("inlineCode",{parentName:"h4"},"cluster-user-auth")," and ",(0,i.kt)("inlineCode",{parentName:"h4"},"oidc-auth")," Secrets"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"cluster-user-auth")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"oidc-auth")," secrets provide information for authenticating\nto the application. The former holds the username and bcrypt-hashed password\nfor the ",(0,i.kt)("a",{parentName:"p",href:"#configuring-the-emergency-user"},"emergency user"),", and the latter holds OIDC configuration."),(0,i.kt)("p",null,"The application needs to be able to access these secrets in order to\nauthenticate users."),(0,i.kt)("h3",{id:"user-permissions-1"},"User Permissions"),(0,i.kt)("p",null,"This section discusses the ",(0,i.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/reference/access-authn-authz/rbac/"},"Kubernetes permissions"),"\nneeded by Weave GitOps application users and groups. At a minimum, a User should be bound to a Role in the ",(0,i.kt)("inlineCode",{parentName:"p"},"flux-system")," namespace\u2014which is where\nFlux stores its resources by default\u2014with the following permissions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'rules:\n  # Flux Resources\n  - apiGroups: ["source.toolkit.fluxcd.io"]\n    resources: [ "buckets", "helmcharts", "gitrepositories", "helmrepositories", "ocirepositories" ]\n    verbs: [ "get", "list", "watch", "patch" ]\n\n  - apiGroups: ["kustomize.toolkit.fluxcd.io"]\n    resources: [ "kustomizations" ]\n    verbs: [ "get", "list", "watch", "patch" ]\n\n  - apiGroups: ["helm.toolkit.fluxcd.io"]\n    resources: [ "helmreleases" ]\n    verbs: [ "get", "list", "watch", "patch" ]\n\n  - apiGroups: [ "notification.toolkit.fluxcd.io" ]\n    resources: [ "providers", "alerts" ]\n    verbs: [ "get", "list", "watch", "patch" ]\n\n  - apiGroups: ["infra.contrib.fluxcd.io"]\n    resources: ["terraforms"]\n    verbs: [ "get", "list", "watch", "patch" ]\n\n  # Read access for all other Kubernetes objects\n  - apiGroups: ["*"]\n    resources: ["*"]\n    verbs: [ "get", "list", "watch" ]\n')),(0,i.kt)("p",null,"For a wider scope, the User can be bound to a ClusterRole with the same set."),(0,i.kt)("p",null,"On top of this you can add other permissions to view WGE resources like ",(0,i.kt)("inlineCode",{parentName:"p"},"GitOpsSets")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Templates"),"."),(0,i.kt)("h4",{id:"flux-resources"},"Flux Resources"),(0,i.kt)("p",null,"The following table lists resources that Flux works with directly."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"API Group"),(0,i.kt)("th",{parentName:"tr",align:null},"Resources"),(0,i.kt)("th",{parentName:"tr",align:null},"Permissions"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"kustomize.toolkit.fluxcd.io"),(0,i.kt)("td",{parentName:"tr",align:null},"kustomizations"),(0,i.kt)("td",{parentName:"tr",align:null},"get, list, patch")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"helm.toolkit.fluxcd.io"),(0,i.kt)("td",{parentName:"tr",align:null},"Helm Releases"),(0,i.kt)("td",{parentName:"tr",align:null},"get, list, patch")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"source.toolkit.fluxcd.io"),(0,i.kt)("td",{parentName:"tr",align:null},"buckets, Helm charts, Git repositories, Helm repositories, OCI repositories"),(0,i.kt)("td",{parentName:"tr",align:null},"get, list, patch")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"notification.toolkit.fluxcd.io"),(0,i.kt)("td",{parentName:"tr",align:null},"providers, alerts"),(0,i.kt)("td",{parentName:"tr",align:null},"get, list")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"infra.contrib.fluxcd.io"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/weaveworks/tf-controller"},"Terraform")),(0,i.kt)("td",{parentName:"tr",align:null},"get, list, patch")))),(0,i.kt)("p",null," Weave GitOps needs to be able to query the ",(0,i.kt)("a",{parentName:"p",href:"https://fluxcd.io/docs/components/"},"CRDs")," that Flux uses before it can accurately display Flux state. The\n",(0,i.kt)("inlineCode",{parentName:"p"},"get")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," permissions facilitate this."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"patch")," permissions are used for two features: to suspend and resume\nreconciliation of a resource by modifying the 'spec' of a resource,\nand to force reconciliation of a resource by modifying resource annotations. These features work in the same way that ",(0,i.kt)("inlineCode",{parentName:"p"},"flux suspend"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"flux resume"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"flux reconcile")," does on the CLI."),(0,i.kt)("h4",{id:"resources-managed-via-flux"},"Resources Managed via Flux"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"API Group"),(0,i.kt)("th",{parentName:"tr",align:null},"Resources"),(0,i.kt)("th",{parentName:"tr",align:null},"Permissions"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},'""'),(0,i.kt)("td",{parentName:"tr",align:null},"configmaps, secrets, pods, services, persistent volumes, persistent volume claims"),(0,i.kt)("td",{parentName:"tr",align:null},"get, list, watch")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"apps"),(0,i.kt)("td",{parentName:"tr",align:null},"deployments, replica sets, stateful sets"),(0,i.kt)("td",{parentName:"tr",align:null},"get, list, watch")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"batch"),(0,i.kt)("td",{parentName:"tr",align:null},"jobs, cron jobs"),(0,i.kt)("td",{parentName:"tr",align:null},"get, list, watch")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"autoscaling"),(0,i.kt)("td",{parentName:"tr",align:null},"horizontal pod autoscalers"),(0,i.kt)("td",{parentName:"tr",align:null},"get, list, watch")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"rbac.authorization.k8s.io"),(0,i.kt)("td",{parentName:"tr",align:null},"roles, cluster roles, rolebindings, cluster role bindings"),(0,i.kt)("td",{parentName:"tr",align:null},"get, list, watch")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"networking.k8s.io"),(0,i.kt)("td",{parentName:"tr",align:null},"ingresses"),(0,i.kt)("td",{parentName:"tr",align:null},"get, list, watch")))),(0,i.kt)("p",null,"Weave GitOps reads basic resources so that it can monitor the effect that Flux has\non what's running."),(0,i.kt)("p",null,"Reading ",(0,i.kt)("inlineCode",{parentName:"p"},"secrets")," enables Weave GitOps to monitor the state of Helm releases\nas that's where it stores the ",(0,i.kt)("a",{parentName:"p",href:"https://helm.sh/docs/faq/changes_since_helm2/#secrets-as-the-default-storage-driver"},"state by default"),".\nFor clarity this these are the Helm release objects ",(0,i.kt)("em",{parentName:"p"},"not")," the Flux HelmRelease\nresource (which are dealt with by the earlier section)."),(0,i.kt)("h4",{id:"feedback-from-flux"},"Feedback from Flux"),(0,i.kt)("p",null,"Flux communicates the status of itself primarily via events.\nThese events will show when reconciliations start and stop, whether they're successful,\nand information as to why they're not."),(0,i.kt)("h3",{id:"login-ui"},"Login UI"),(0,i.kt)("p",null,"The label of the OIDC button on the login screen is configurable via a feature flag environment variable.\nThis can give your users a more familiar experience when logging in."),(0,i.kt)("p",null,"Adjust the configuration in the Helm ",(0,i.kt)("inlineCode",{parentName:"p"},"values.yaml")," file or the ",(0,i.kt)("inlineCode",{parentName:"p"},"spec.values")," section of the Weave GitOps ",(0,i.kt)("inlineCode",{parentName:"p"},"HelmRelease")," resource:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'extraEnvVars:\n  - name: WEAVE_GITOPS_FEATURE_OIDC_BUTTON_LABEL\n    value: "Login with ACME"\n')),(0,i.kt)("h2",{id:"recommended-rbac-configuration"},"Recommended RBAC Configuration"),(0,i.kt)("p",null,"This section is purposefully vague as we intend to give a broad idea of how to implement such a system. The specifics will dependent\non your circumstances and goals."),(0,i.kt)("p",null,"Our general recommendation is to use OIDC and a small number of groups that Weave GitOps can impersonate."),(0,i.kt)("p",null,"Configuring Weave GitOps to impersonate Kubernetes groups rather than users has the following benefits:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A user's permissions for impersonation by Weave GitOps can be separate from\nany other permissions that they may or may not have within the cluster."),(0,i.kt)("li",{parentName:"ul"},"Users do not have to be individually managed within the cluster and can have\ntheir permissions managed together.")),(0,i.kt)("h3",{id:"example-setup"},"Example Setup"),(0,i.kt)("p",null,"Assume that your company has the following people in OIDC:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Aisha, a cluster admin, who should have full admin access to Weave GitOps"),(0,i.kt)("li",{parentName:"ul"},"Brian, lead of Team-A, who should have admin permissions to their team's\nnamespace in Weave GitOps and read-only otherwise"),(0,i.kt)("li",{parentName:"ul"},"June and Jo, developers in Team-A who should have read-only access to Weave GitOps")),(0,i.kt)("p",null,"You can then create three groups:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"wego-admin"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Bound to the ",(0,i.kt)("inlineCode",{parentName:"li"},"ClusterRole"),", created by Helm, ",(0,i.kt)("inlineCode",{parentName:"li"},"wego-admin-cluster-role")),(0,i.kt)("li",{parentName:"ul"},"Aisha is the only member"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"wego-team-a-admin"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Bound to a ",(0,i.kt)("inlineCode",{parentName:"li"},"Role"),", using the same permissions as ",(0,i.kt)("inlineCode",{parentName:"li"},"wego-admin-role"),", created\nin Team-A's namespace"),(0,i.kt)("li",{parentName:"ul"},"Brian and Aisha are members"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"wego-readonly"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Bound to a ",(0,i.kt)("inlineCode",{parentName:"li"},"ClusterRole")," that matches ",(0,i.kt)("inlineCode",{parentName:"li"},"wego-admin-cluster-role")," but with\nno ",(0,i.kt)("inlineCode",{parentName:"li"},"patch")," permissions."),(0,i.kt)("li",{parentName:"ul"},"Aisha, Brian, June and Jo are all members")))),(0,i.kt)("admonition",{title:"Using OIDC for cluster and Weave GitOps Authentication",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"If the same OIDC provider is used to authenticate a user with the cluster\nitself (e.g. for use with ",(0,i.kt)("inlineCode",{parentName:"p"},"kubectl"),") and to Weave GitOps then, depending\non OIDC configuration, they may end up with the super-set of their permissions\nfrom Weave GitOps and any other permissions granted to them."),(0,i.kt)("p",{parentName:"admonition"},"This can lead to unintended consequences, like viewing ",(0,i.kt)("inlineCode",{parentName:"p"},"secrets"),". To avoid\nthis, OIDC providers will often let you configure which groups are returned\nto which clients. The Weave GitOps groups should not be returned to the\ncluster client (and vice versa).")),(0,i.kt)("h3",{id:"code"},"Code"),(0,i.kt)("p",null,"The yaml to configure these permissions would look roughly like:"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand to see example RBAC"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'# Admin cluster role\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: wego-admin-cluster-role\nrules:\n  - apiGroups: [""]\n    resources: ["secrets", "pods" ]\n    verbs: [ "get", "list" ]\n  - apiGroups: ["apps"]\n    resources: [ "deployments", "replicasets"]\n    verbs: [ "get", "list" ]\n  - apiGroups: ["kustomize.toolkit.fluxcd.io"]\n    resources: [ "kustomizations" ]\n    verbs: [ "get", "list", "patch" ]\n  - apiGroups: ["helm.toolkit.fluxcd.io"]\n    resources: [ "helmreleases" ]\n    verbs: [ "get", "list", "patch" ]\n  - apiGroups: ["source.toolkit.fluxcd.io"]\n    resources: [ "buckets", "helmcharts", "gitrepositories", "helmrepositories", "ocirepositories" ]\n    verbs: [ "get", "list", "patch" ]\n  - apiGroups: [""]\n    resources: ["events"]\n    verbs: ["get", "watch", "list"]\n---\n# Read-only cluster role\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: wego-readonly-role\nrules:\n  # All the \'patch\' permissions have been removed\n  - apiGroups: [""]\n    resources: ["secrets", "pods" ]\n    verbs: [ "get", "list" ]\n  - apiGroups: ["apps"]\n    resources: [ "deployments", "replicasets"]\n    verbs: [ "get", "list" ]\n  - apiGroups: ["kustomize.toolkit.fluxcd.io"]\n    resources: [ "kustomizations" ]\n    verbs: [ "get", "list" ]\n  - apiGroups: ["helm.toolkit.fluxcd.io"]\n    resources: [ "helmreleases" ]\n    verbs: [ "get", "list" ]\n  - apiGroups: ["source.toolkit.fluxcd.io"]\n    resources: [ "buckets", "helmcharts", "gitrepositories", "helmrepositories", "ocirepositories" ]\n    verbs: [ "get", "list" ]\n  - apiGroups: [""]\n    resources: ["events"]\n    verbs: ["get", "watch", "list"]\n---\n# Bind the cluster admin role to the wego-admin group\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: wego-cluster-admin\nsubjects:\n- kind: Group\n  name: wego-admin # only Aisha is a member\n  apiGroup: rbac.authorization.k8s.io\nroleRef:\n  kind: ClusterRole\n  name: wego-admin-cluster-role\n  apiGroup: rbac.authorization.k8s.io\n---\n# Bind the admin role in the team-a namespace for the wego-team-a-admin group\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: wego-team-a-admin-role\n  namespace: team-a\nsubjects:\n- kind: Group\n  name: wego-team-a-admin # Aisha & Brian are members\n  apiGroup: rbac.authorization.k8s.io\nroleRef:\n  # Use the cluster role to set rules, just bind them in the team-a namespace\n  kind: ClusterRole\n  name: wego-admin-role\n  apiGroup: rbac.authorization.k8s.io\n---\n# Bind the read-only role to the read-only group\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: wego-readonly-role\nsubjects:\n- kind: Group\n  name: wego-readonly # Everyone is a member\n  apiGroup: rbac.authorization.k8s.io\nroleRef:\n  kind: ClusterRole\n  name: wego-readonly-role\n  apiGroup: rbac.authorization.k8s.io\n---\n'))),(0,i.kt)("h2",{id:"configure-access-for-writing-to-git-from-the-weave-gitops-enterprise-ui"},"Configure Access for Writing to Git from the Weave GitOps Enterprise UI"),(0,i.kt)("p",null,"Here we provide guidance for GitHub, GitLab, BitBucket Server, and Azure DevOps."),(0,i.kt)(s.Z,{groupId:"git-provider",default:!0,mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"github",label:"GitHub",mdxType:"TabItem"},"GitHub requires no additional configuration for OAuth git access"),(0,i.kt)(o.Z,{value:"gitlab",label:"GitLab",mdxType:"TabItem"},(0,i.kt)("p",null,"Create a GitLab OAuth application that will request ",(0,i.kt)("inlineCode",{parentName:"p"},"api")," permissions to create pull requests on your behalf."),(0,i.kt)("p",null,"Follow the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/integration/oauth_provider.html"},"GitLab docs"),"."),(0,i.kt)("p",null,"The application should have at least these scopes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"api")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"openid")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"email")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"profile"))),(0,i.kt)("p",null,"Add callback URLs to the application for each address the UI will be exposed on, e.g.:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"https://localhost:8000/oauth/gitlab")," for port-forwarding and testing"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"https://git.example.com/oauth/gitlab")," for production use")),(0,i.kt)("p",null,"Save your application, taking note of the ",(0,i.kt)("strong",{parentName:"p"},"Client ID")," and ",(0,i.kt)("strong",{parentName:"p"},"Client Secret"),". Save\nthem into the ",(0,i.kt)("inlineCode",{parentName:"p"},"git-provider-credentials")," secret, along with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GIT_HOST_TYPES")," to tell WGE that the host is gitlab"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GITLAB_HOSTNAME")," where the OAuth app is hosted")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Replace values")," in this snippet and run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'kubectl create secret generic git-provider-credentials --namespace=flux-system \\\n  --from-literal="GITLAB_CLIENT_ID=13457" \\\n  --from-literal="GITLAB_CLIENT_SECRET=24680" \\\n  --from-literal="GITLAB_HOSTNAME=git.example.com" \\\n  --from-literal="GIT_HOST_TYPES=git.example.com=gitlab"\n'))),(0,i.kt)(o.Z,{value:"bitbucket-server",label:"BitBucket Server",mdxType:"TabItem"},(0,i.kt)("p",null,"Create a new ",(0,i.kt)("a",{parentName:"p",href:"https://confluence.atlassian.com/bitbucketserver/configure-an-incoming-link-1108483657.html"},"incoming application link")," from\nthe BitBucket administration dashboard. You will be asked to enter a unique name and the redirect URL for the external application. The redirect URL\nshould be set to ",(0,i.kt)("inlineCode",{parentName:"p"},"<WGE dashboard URL>/oauth/bitbucketserver"),". You will also need to select permissions for the application. The minimum set of\npermissions needed for WGE to create pull requests on behalf of users is ",(0,i.kt)("inlineCode",{parentName:"p"},"Repositories - Write"),". An example of configuring these settings is shown below."),(0,i.kt)("figure",null,(0,i.kt)("img",{src:d.Z,width:"500"}),(0,i.kt)("figcaption",null,"Configuring a new incoming application link")),(0,i.kt)("p",null,"Save your application and take note of the ",(0,i.kt)("strong",{parentName:"p"},"Client ID")," and ",(0,i.kt)("strong",{parentName:"p"},"Client Secret"),". Save\nthem into the ",(0,i.kt)("inlineCode",{parentName:"p"},"git-provider-credentials")," secret, along with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GIT_HOST_TYPES")," to tell WGE that the host is bitbucket-server"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BITBUCKET_SERVER_HOSTNAME")," where the OAuth app is hosted")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Replace values")," in this snippet and run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'kubectl create secret generic git-provider-credentials --namespace=flux-system \\\n  --from-literal="BITBUCKET_SERVER_CLIENT_ID=13457" \\\n  --from-literal="BITBUCKET_SERVER_CLIENT_SECRET=24680" \\\n  --from-literal="BITBUCKET_SERVER_HOSTNAME=git.example.com" \\\n  --from-literal="GIT_HOST_TYPES=git.example.com=bitbucket-server"\n')),(0,i.kt)("p",null,"If the secret is already present, use the following command to update it using your default editor:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl edit secret generic git-provider-credentials --namespace=flux-system\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"If BitBucket Server is running on the default port (7990), make sure you include the port number in the values of the secret. For example: ",(0,i.kt)("inlineCode",{parentName:"p"},"GIT_HOST_TYPES=git.example.com:7990=bitbucket-server")))),(0,i.kt)(o.Z,{value:"azure-devops",label:"Azure DevOps",mdxType:"TabItem"},(0,i.kt)("p",null,"Navigate to ",(0,i.kt)("a",{parentName:"p",href:"https://app.vsaex.visualstudio.com/app/register"},"VisualStudio")," and register a new application, as explained in the ",(0,i.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/devops/integrate/get-started/authentication/oauth?view=azure-devops#1-register-your-app"},"docs"),". Set the authorization callback URL and select which scopes to grant. Set the callback URL to ",(0,i.kt)("inlineCode",{parentName:"p"},"<WGE dashboard URL>/oauth/azuredevops"),". "),(0,i.kt)("p",null,"Select the ",(0,i.kt)("inlineCode",{parentName:"p"},"Code (read and write)")," scope from the list. This is necessary so that WGE can create pull requests on behalf of users. An example of configuring these settings is shown below."),(0,i.kt)("figure",null,(0,i.kt)("img",{src:m.Z}),(0,i.kt)("figcaption",null,"Creating a new application")),(0,i.kt)("p",null,"After creating your application, you will be presented with the application settings. Take note of the ",(0,i.kt)("inlineCode",{parentName:"p"},"App ID")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Client Secret")," values\u2014you will use them to configure WGE."),(0,i.kt)("figure",null,(0,i.kt)("img",{src:h.Z}),(0,i.kt)("figcaption",null,"Application settings")),(0,i.kt)("p",null,"In your cluster, create a secret named ",(0,i.kt)("inlineCode",{parentName:"p"},"git-provider-credentials")," that contains the ",(0,i.kt)("inlineCode",{parentName:"p"},"App ID")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Client Secret")," values from the newly created application."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Replace values")," in this snippet and run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'kubectl create secret generic git-provider-credentials --namespace=flux-system \\\n  --from-literal="AZURE_DEVOPS_CLIENT_ID=<App ID value>" \\\n  --from-literal="AZURE_DEVOPS_CLIENT_SECRET=<Client Secret value>"\n')),(0,i.kt)("p",null,"WGE is now configured to ask users for authorization the next time a pull request must be created as part of using a template. Note that each user can view and manage which applications they have authorized by navigating to ",(0,i.kt)("a",{parentName:"p",href:"https://app.vsaex.visualstudio.com/me"},"https://app.vsaex.visualstudio.com/me"),"."))),(0,i.kt)("h2",{id:"tls-configuration"},"TLS Configuration"),(0,i.kt)("p",null,"By default, the WGE UI pod will listen on port ",(0,i.kt)("inlineCode",{parentName:"p"},"8000")," with TLS enabled.\nWGE will generate and use a self-signed certificate for this purpose."),(0,i.kt)("p",null,"It can then be accessed via port-forwarding:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"kubectl port-forward --namespace flux-system svc/clusters-service 8000:8000")),(0,i.kt)("p",null,"If you're using an ingress controller to terminate TLS you can disable it in the Helm release:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"  values:\n    tls:\n      enabled: false\n")),(0,i.kt)("p",null,"Other ingress conguration changes can be made via the ingress configuration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"  values:\n    ingress:\n      enabled: true\n      ... other parameters specific to the ingress type ...\n")),(0,i.kt)("h2",{id:"configure-helm-chart-and-commit"},"Configure Helm Chart and Commit"),(0,i.kt)("p",null,"We deploy WGE via a Helm chart. We'll save and adapt the below template before committing it in Git to a Flux-reconciled path."),(0,i.kt)("p",null,"Clone the newly created repo locally. We're gonna add some things!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"git clone git@<provider>:<username>/fleet-infra\ncd fleet-infra\n")),(0,i.kt)("p",null,"Download the helm-release to ",(0,i.kt)("inlineCode",{parentName:"p"},"clusters/management/weave-gitops-enterprise.yaml"),"."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand to see file contents"),(0,i.kt)(c,{localPath:"clusters/management/weave-gitops-enterprise.yaml",hostedPath:k,content:"apiVersion: source.toolkit.fluxcd.io/v1beta2\nkind: HelmRepository\nmetadata:\n  name: weave-gitops-enterprise-charts\n  namespace: flux-system\nspec:\n  interval: 60m\n  secretRef:\n    name: weave-gitops-enterprise-credentials\n  url: https://charts.dev.wkp.weave.works/releases/charts-v3\n---\napiVersion: helm.toolkit.fluxcd.io/v2beta1\nkind: HelmRelease\nmetadata:\n  name: weave-gitops-enterprise\n  namespace: flux-system\nspec:\n  chart:\n    spec:\n      interval: 65m\n      chart: mccp\n      sourceRef:\n        kind: HelmRepository\n        name: weave-gitops-enterprise-charts\n        namespace: flux-system\n      version: 0.x.x\n  install:\n    crds: CreateReplace\n  upgrade:\n    crds: CreateReplace\n  interval: 50m\n  values:\n    # -- Configure TLS settings if needed\n    # tls:\n      # -- Can be disabled if TLS is handled by a user-provided ingress controller\n      # enabled: true\n      # -- optionally specify a TLS secret\n      # secretName: null\n    config:\n      capi:\n        repositoryURL: https://github.com/$GITHUB_USER/fleet-infra\n        # -- Can be changed depending on your git repo structure\n        # repositoryPath: ./clusters/management/clusters\n        # repositoryClustersPath: ./cluster\n      git:\n        type: github\n        # -- Change if using on-prem github/gitlab\n        # hostname: https://github.com\n",mdxType:"CurlCodeBlock"})),(0,i.kt)("p",null,"Once you have copied the above file, open and adjust the following configuration\noptions:"),(0,i.kt)("h4",{id:"valuesconfigcapirepositoryurl"},(0,i.kt)("inlineCode",{parentName:"h4"},"values.config.capi.repositoryURL")),(0,i.kt)("p",null,"Ensure this has been set to your repository URL."),(0,i.kt)("h4",{id:"valuesconfigcapirepositorypath"},(0,i.kt)("inlineCode",{parentName:"h4"},"values.config.capi.repositoryPath")),(0,i.kt)("p",null,"By default, WGE will create new clusters in the ",(0,i.kt)("inlineCode",{parentName:"p"},"clusters/management/clusters")," path.\nYou can configure it with ",(0,i.kt)("inlineCode",{parentName:"p"},"values.config.capi.repositoryPath"),".\nYou might what to change it to ",(0,i.kt)("inlineCode",{parentName:"p"},"clusters/my-cluster/cluster")," if you configured Flux to reconcile ",(0,i.kt)("inlineCode",{parentName:"p"},"./clusters/my-cluster")," instead."),(0,i.kt)("h4",{id:"valuesconfigcapirepositoryclusterspath"},(0,i.kt)("inlineCode",{parentName:"h4"},"values.config.capi.repositoryClustersPath")),(0,i.kt)("p",null,"The other important path to configure is where you'll store applications and workloads run on the new cluster.\nBy default this is ",(0,i.kt)("inlineCode",{parentName:"p"},"./clusters"),". When a new cluster is specified, any selected profiles will be written to ",(0,i.kt)("inlineCode",{parentName:"p"},"./clusters/{.namespace}/{.clusterName}/profiles.yaml"),".\nWhen the new cluster is bootstrapped, Flux will sync the ",(0,i.kt)("inlineCode",{parentName:"p"},"./clusters/{.namespace}/{.clusterName}")," path."),(0,i.kt)("h2",{id:"configure-your-password"},"Configure Your Password"),(0,i.kt)("p",null,"To login to the WGE UI, generate a bcrypt hash for your chosen password and store it as a secret in the Kubernetes cluster. There are several different ways to generate a bcrypt hash. Here, we'll use ",(0,i.kt)("inlineCode",{parentName:"p"},"gitops get bcrypt-hash")," from our CLI."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'PASSWORD="<Make up and insert a brand-new password here>"\necho -n $PASSWORD | gitops get bcrypt-hash | kubectl create secret generic cluster-user-auth -n flux-system --from-literal=username=wego-admin --from-file=password=/dev/stdin\n')),(0,i.kt)("p",null,"A validation to know it\u2019s working:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get secret -n flux-system cluster-user-auth\n")),(0,i.kt)("h3",{id:"optional-install-policy-agent"},"(Optional) Install Policy Agent"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/0.35.0/policy/intro"},"Policy agent")," comes packaged with the WGE chart. To install it, set the following values:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"values.policy-agent.enabled"),": set to true to install the agent with WGE"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"values.policy-agent.config.accountId"),": organization name, used as identifier"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"values.policy-agent.config.clusterId"),": unique identifier for the cluster")),(0,i.kt)("p",null,"Commit and push all the files"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'git add clusters/management/weave-gitops-enterprise.yaml\ngit commit -m "Deploy Weave GitOps Enterprise"\ngit push\n')),(0,i.kt)("p",null,"Flux will reconcile the helm-release and WGE will be deployed into the cluster. You can check the ",(0,i.kt)("inlineCode",{parentName:"p"},"flux-system")," namespace to verify all pods are running."),(0,i.kt)("h2",{id:"next-steps"},"Next Steps"),(0,i.kt)("p",null,"Here are a couple of options for you to take your next steps with WGE. Explore one option or all of them, in no particular order."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.gitops.weave.works/docs/next/cluster-management/intro/"},"Cluster Management"),": We'll show you how to join WGE to a cluster and install an application on that cluster ",(0,i.kt)("em",{parentName:"li"},"without")," using Cluster API. But if you prefer using Cluster API, our docs cover that too."),(0,i.kt)("li",{parentName:"ul"},"Install the ",(0,i.kt)("a",{parentName:"li",href:"https://weaveworks.github.io/tf-controller/"},"Terraform Controller")," to reconcile your Terraform resources in a GitOps way. With Flux and the TF Controller, WGE makes it easy to add Terraform templates to your clusters and continuously reconcile any changes made to the Terraform source manifest."),(0,i.kt)("li",{parentName:"ul"},"Install ",(0,i.kt)("a",{parentName:"li",href:"/docs/0.35.0/policy/intro"},"Policy agent"),", which comes packaged with the WGE chart.")))}C.isMDXComponent=!0},87585:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/oauth-azure-devops-success-4806f495e958a093e7e20df952e2026e.png"},17779:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/oauth-azure-devops-fedd005afed739e13a4a8bbd676c3928.png"},74354:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/oauth-bitbucket-dd2f409a75d5fa495765537b2c3f6f17.png"},53563:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/dex-auth-ac6eb85deea39611dc993466ad3bd5b4.png"},83830:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/github-auth-23eff76cb50af1d3ed0d9a860e7e4ca5.png"},46776:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/github-oauth-application-025c1ee38b9222838c8d1d2c34a5c46a.png"},11905:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/oidc-login-bb254f334d81593a64485ae71289a24f.png"},63429:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/ui-logged-in-cd5600d95c346a0f94d12f8fdab3e9fa.png"}}]);