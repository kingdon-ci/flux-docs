"use strict";(self.webpackChunkweave_gitops_docs=self.webpackChunkweave_gitops_docs||[]).push([[97026],{83578:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=r(87462),n=(r(67294),r(3905));const i={title:"Overview",hide_title:!0},o="Overview",l={unversionedId:"terraform/overview",id:"version-0.22.0/terraform/overview",title:"Overview",description:"TF-controller is a controller for Weave GitOps that follows the patterns established",source:"@site/versioned_docs/version-0.22.0/terraform/overview.mdx",sourceDirName:"terraform",slug:"/terraform/overview",permalink:"/docs/0.22.0/terraform/overview",draft:!1,editUrl:"https://github.com/weaveworks/weave-gitops/edit/main/website/versioned_docs/version-0.22.0/terraform/overview.mdx",tags:[],version:"0.22.0",frontMatter:{title:"Overview",hide_title:!0},sidebar:"docs",previous:{title:"Operations",permalink:"/docs/0.22.0/explorer/operations"},next:{title:"Get Started",permalink:"/docs/0.22.0/terraform/get-started"}},s={},p=[{value:"Features",id:"features",level:2},{value:"Dependencies",id:"dependencies",level:2}],c={toc:p};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"overview"},"Overview"),(0,n.kt)("p",null,"TF-controller is a controller for Weave GitOps that follows the patterns established\nby ",(0,n.kt)("a",{parentName:"p",href:"https://fluxcd.io"},"Flux"),". It is a reliable tool for managing your infrastructure using the GitOps approach.\nWith its support for Terraform and integration with Weave GitOps,\nyou can trust that it will help you effectively GitOps-ify your infrastructure and application\nresources in the Kubernetes and Terraform universe at your own pace."),(0,n.kt)("p",null,"The following GitOps models are available to suit your specific needs:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"GitOps Automation Model:")," Fully automate the GitOps process for all of your Terraform resources, including the provisioning and enforcement steps."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Hybrid GitOps Automation Model:")," Choose to GitOps-ify certain parts of your existing infrastructure resources, such as a nodegroup or security group in an existing EKS cluster."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"State Enforcement Model:")," Use GitOps to enforce an existing ",(0,n.kt)("inlineCode",{parentName:"li"},"tfstate")," without making any other changes."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Drift Detection Model:")," Use GitOps for drift detection, so you can decide what actions to take when a drift occurs.")),(0,n.kt)("p",null,"To get started with TF-controller, simply follow the provided ",(0,n.kt)("a",{parentName:"p",href:"../get-started"},"getting started")," guide."),(0,n.kt)("h2",{id:"features"},"Features"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Multi-Tenancy"),": TF-controller supports multi-tenancy by running Terraform ",(0,n.kt)("inlineCode",{parentName:"li"},"plan")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"apply")," inside Runner Pods.\nWhen specifying ",(0,n.kt)("inlineCode",{parentName:"li"},".metadata.namespace")," and ",(0,n.kt)("inlineCode",{parentName:"li"},".spec.serviceAccountName"),", the Runner Pod uses the specified ServiceAccount\nand runs inside the specified Namespace. These settings enable the soft multi-tenancy model, which can be used within\nthe Flux multi-tenancy setup. ",(0,n.kt)("em",{parentName:"li"},"This feature is available since v0.9.0.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"GitOps Automation for Terraform"),": With setting ",(0,n.kt)("inlineCode",{parentName:"li"},".spec.approvePlan=auto"),", it allows a ",(0,n.kt)("inlineCode",{parentName:"li"},"Terraform")," object\nto be reconciled and act as the representation of your Terraform resources. The TF-controller uses the spec of\nthe ",(0,n.kt)("inlineCode",{parentName:"li"},"Terraform")," object to perform ",(0,n.kt)("inlineCode",{parentName:"li"},"plan"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"apply")," its associated Terraform resources. It then stores\nthe ",(0,n.kt)("inlineCode",{parentName:"li"},"TFSTATE")," of the applied resources as a ",(0,n.kt)("inlineCode",{parentName:"li"},"Secret")," inside the Kubernetes cluster. After ",(0,n.kt)("inlineCode",{parentName:"li"},".spec.interval")," passes,\nthe controller performs drift detection to check if there is a drift occurred between your live system,\nand your Terraform resources. If a drift occurs, the plan to fix that drift will be generated and applied automatically.\n",(0,n.kt)("em",{parentName:"li"},"This feature is available since v0.3.0.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Drift detection"),": This feature is a part of the GitOps automation feature. The controller detects and fixes drift\nfor your infrastructures, based on the Terraform resources and their ",(0,n.kt)("inlineCode",{parentName:"li"},"TFSTATE"),". ",(0,n.kt)("em",{parentName:"li"},"This feature is available since v0.5.0."),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Drift detection is enabled by default. You can use the field ",(0,n.kt)("inlineCode",{parentName:"li"},".spec.disableDriftDetection")," to disable this behaviour.\n",(0,n.kt)("em",{parentName:"li"},"This feature is available since v0.7.0.")),(0,n.kt)("li",{parentName:"ul"},"The Drift detection only mode, without plan or apply steps, allows you to perform read-only drift detection.\n",(0,n.kt)("em",{parentName:"li"},"This feature is available since v0.8.0.")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Plan and Manual Approve"),": This feature allows you to separate the ",(0,n.kt)("inlineCode",{parentName:"li"},"plan"),", out of the ",(0,n.kt)("inlineCode",{parentName:"li"},"apply")," step, just like\nthe Terraform workflow you are familiar with. A good thing about this is that it is done in a GitOps way. When a plan\nis generated, the controller shows you a message like ",(0,n.kt)("strong",{parentName:"li"},"'set approvePlan: \"plan-main-123\" to apply this plan.'"),".\nYou make change to the field ",(0,n.kt)("inlineCode",{parentName:"li"},".spec.approvePlan"),", commit and push to tell the TF-controller to apply the plan for you.\nWith this GitOps workflow, you can optionally create and push this change to a new branch for your team member to\nreview and approve too. ",(0,n.kt)("em",{parentName:"li"},"This feature is available since v0.6.0.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"YAML-based Terraform"),": The ",(0,n.kt)("inlineCode",{parentName:"li"},"Terraform")," object in v0.13.0+ allows you to better configure your\nTerraform resources via YAMLs, but without introducing any extra CRDs to your cluster. Together with a new generator\ncalled ",(0,n.kt)("strong",{parentName:"li"},"Tofu-Jet"),", we'll now be able to ship pre-generated primitive Terraform modules for all major cloud providers.\nA primitive Terraform module is a module that only contains a single primitive resource, like ",(0,n.kt)("inlineCode",{parentName:"li"},"aws_iam_role"),", or ",(0,n.kt)("inlineCode",{parentName:"li"},"aws_iam_policy"),".\nWith this concept, we would be able to use Terraform without writing Terraform codes, and make it more GitOps-friendly at the same time.\n",(0,n.kt)("em",{parentName:"li"},"This feature is available since v0.13.0.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Enterprise Dashboard Support:")," with Weave GitOps Enterprise v0.9.6 and later, you are now able to manage ",(0,n.kt)("inlineCode",{parentName:"li"},"Terraform")," objects the same way you can\nwith ",(0,n.kt)("inlineCode",{parentName:"li"},"Kustomization")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"HelmReleases"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"First-class Terraform Cloud Support:")," ",(0,n.kt)("inlineCode",{parentName:"li"},"Terraform")," objects can now be configured to use Terraform Cloud as the backend\nfor storing the state with ",(0,n.kt)("inlineCode",{parentName:"li"},"spec.cloud"),". ",(0,n.kt)("em",{parentName:"li"},"This feature is available since v0.14.0."))),(0,n.kt)("h2",{id:"dependencies"},"Dependencies"),(0,n.kt)("p",null,"TF-controller has its own versioning system that is separate from the versioning system used by Weave GitOps.\nThis means that you can install and use TF-controller independently of Weave GitOps and it will not be affected\nby the version of Weave GitOps that you are using."),(0,n.kt)("p",null,"Here is the dependency matrix:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"center"},"Version"),(0,n.kt)("th",{parentName:"tr",align:"center"},"Terraform"),(0,n.kt)("th",{parentName:"tr",align:"center"},"Source Controller"),(0,n.kt)("th",{parentName:"tr",align:"center"},"Flux v2"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},(0,n.kt)("strong",{parentName:"td"},"v0.14.0")),(0,n.kt)("td",{parentName:"tr",align:"center"},"v1.3.9"),(0,n.kt)("td",{parentName:"tr",align:"center"},"v0.35.1"),(0,n.kt)("td",{parentName:"tr",align:"center"},"v0.40.x")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"v0.13.1"),(0,n.kt)("td",{parentName:"tr",align:"center"},"v1.3.1"),(0,n.kt)("td",{parentName:"tr",align:"center"},"v0.31.0"),(0,n.kt)("td",{parentName:"tr",align:"center"},"v0.38.x")))))}u.isMDXComponent=!0},3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),p=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(r),d=n,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return r?a.createElement(f,o(o({ref:t},c),{},{components:r})):a.createElement(f,o({ref:t},c))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:n,o[1]=l;for(var p=2;p<i;p++)o[p]=r[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"}}]);