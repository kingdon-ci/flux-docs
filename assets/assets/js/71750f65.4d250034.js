"use strict";(self.webpackChunkweave_gitops_docs=self.webpackChunkweave_gitops_docs||[]).push([[68384],{46832:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(87462),i=(n(67294),n(3905));const o={},c=void 0,s={unversionedId:"references/cli-reference/gitops_check_oidc-config",id:"version-0.38.0/references/cli-reference/gitops_check_oidc-config",title:"gitops_check_oidc-config",description:"gitops check oidc-config",source:"@site/versioned_docs/version-0.38.0/references/cli-reference/gitops_check_oidc-config.md",sourceDirName:"references/cli-reference",slug:"/references/cli-reference/gitops_check_oidc-config",permalink:"/docs/references/cli-reference/gitops_check_oidc-config",draft:!1,editUrl:"https://github.com/weaveworks/weave-gitops/edit/main/website/versioned_docs/version-0.38.0/references/cli-reference/gitops_check_oidc-config.md",tags:[],version:"0.38.0",frontMatter:{},sidebar:"ref",previous:{title:"gitops_check",permalink:"/docs/references/cli-reference/gitops_check"},next:{title:"gitops_completion",permalink:"/docs/references/cli-reference/gitops_completion"}},a={},l=[{value:"gitops check oidc-config",id:"gitops-check-oidc-config",level:2},{value:"Synopsis",id:"synopsis",level:3},{value:"Examples",id:"examples",level:3},{value:"Options",id:"options",level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:3},{value:"SEE ALSO",id:"see-also",level:3}],p={toc:l};function f(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"gitops-check-oidc-config"},"gitops check oidc-config"),(0,i.kt)("p",null,"Check an OIDC configuration for proper functionality."),(0,i.kt)("h3",{id:"synopsis"},"Synopsis"),(0,i.kt)("p",null,"This command will send the user through an OIDC authorization code flow using the given OIDC configuration. This is helpful for verifying that a given configuration will work properly with Weave GitOps or for debugging issues. Without any provided flags it will read the configuration from a Secret on the cluster."),(0,i.kt)("p",null,'NOTE: Make sure to configure your OIDC provider so that it accepts "http://localhost:9876" as redirect URI.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"gitops check oidc-config [flags]\n")),(0,i.kt)("h3",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\n# Check the OIDC configuration stored in the flux-system/oidc-auth Secret\ngitops check oidc-config\n\n# Check a different set of scopes\ngitops check oidc-config --scopes=openid,groups\n\n# Check a different username cliam\ngitops check oidc-config --claim-username=sub\n\n# Check configuration without fetching a Secret from the cluster\ngitops check oidc-config --skip-secret --client-id=CID --client-secret=SEC --issuer-url=https://example.org\n        \n")),(0,i.kt)("h3",{id:"options"},"Options"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'      --client-id string        OIDC client ID\n      --client-secret string    OIDC client secret\n      --context string          The name of the kubeconfig context to use\n      --disable-compression     If true, opt-out of response compression for all requests to the server\n      --from-secret string      Get OIDC configuration from the given Secret resource (default "oidc-auth")\n      --groups-claim string     ID token claim to use for the groups.\n  -h, --help                    help for oidc-config\n      --issuer-url string       OIDC issuer URL\n      --scopes strings          OIDC scopes to request (default [openid,offline_access,email,groups])\n      --skip-secret             Do not read OIDC configuration from a Kubernetes Secret but rely solely on the values from the given flags.\n      --username-claim string   ID token claim to use for the user name.\n')),(0,i.kt)("h3",{id:"options-inherited-from-parent-commands"},"Options inherited from parent commands"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'  -e, --endpoint WEAVE_GITOPS_ENTERPRISE_API_URL   The Weave GitOps Enterprise HTTP API endpoint can be set with WEAVE_GITOPS_ENTERPRISE_API_URL environment variable\n      --insecure-skip-tls-verify                   If true, the server\'s certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string                          Paths to a kubeconfig. Only required if out-of-cluster.\n  -n, --namespace string                           The namespace scope for this operation (default "flux-system")\n  -p, --password WEAVE_GITOPS_PASSWORD             The Weave GitOps Enterprise password for authentication can be set with WEAVE_GITOPS_PASSWORD environment variable\n  -u, --username WEAVE_GITOPS_USERNAME             The Weave GitOps Enterprise username for authentication can be set with WEAVE_GITOPS_USERNAME environment variable\n')),(0,i.kt)("h3",{id:"see-also"},"SEE ALSO"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/references/cli-reference/gitops_check"},"gitops check"),"\t - Validates flux compatibility")))}f.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var a=r.createContext({}),l=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(a.Provider,{value:t},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,a=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=l(n),d=i,g=f["".concat(a,".").concat(d)]||f[d]||u[d]||o;return n?r.createElement(g,c(c({ref:t},p),{},{components:n})):r.createElement(g,c({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,c=new Array(o);c[0]=d;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s[f]="string"==typeof e?e:i,c[1]=s;for(var l=2;l<o;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);