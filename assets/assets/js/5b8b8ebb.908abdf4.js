"use strict";(self.webpackChunkweave_gitops_docs=self.webpackChunkweave_gitops_docs||[]).push([[18830],{74526:(e,n,a)=>{a.d(n,{Z:()=>r});var t=a(67294),i=a(88746);a(52426);const o={fontSize:16,marginLeft:4,fontVariant:"all-small-caps"};function r(e){let{tiers:n}=e;return t.createElement(i.Z,{title:`This feature is a available on ${n}.`,style:o},n)}},58177:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>l,default:()=>f,frontMatter:()=>r,metadata:()=>p,toc:()=>c});var t=a(87462),i=(a(67294),a(3905)),o=a(74526);const r={title:"Weave Policy Configuration",hide_title:!0},l='Policy Configuration <TierLabel tiers="Enterprise" />',p={unversionedId:"policy/policy-configuration",id:"version-0.18.0/policy/policy-configuration",title:"Weave Policy Configuration",description:"Goal",source:"@site/versioned_docs/version-0.18.0/policy/policy-configuration.mdx",sourceDirName:"policy",slug:"/policy/policy-configuration",permalink:"/docs/0.18.0/policy/policy-configuration",draft:!1,editUrl:"https://github.com/weaveworks/weave-gitops/edit/main/website/versioned_docs/version-0.18.0/policy/policy-configuration.mdx",tags:[],version:"0.18.0",frontMatter:{title:"Weave Policy Configuration",hide_title:!0},sidebar:"docs",previous:{title:"Weave Policy Set",permalink:"/docs/0.18.0/policy/policy-set"},next:{title:"Profile Releases",permalink:"/docs/0.18.0/policy/releases"}},m={},c=[{value:"Goal",id:"goal",level:2},{value:"Schema",id:"schema",level:2},{value:"Priority of enforcing multiple configs with overlapping targets from low to high",id:"priority-of-enforcing-multiple-configs-with-overlapping-targets-from-low-to-high",level:2},{value:"Example",id:"example",level:3}],s={toc:c};function f(e){let{components:n,...a}=e;return(0,i.kt)("wrapper",(0,t.Z)({},s,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"policy-configuration-"},"Policy Configuration ",(0,i.kt)(o.Z,{tiers:"Enterprise",mdxType:"TierLabel"})),(0,i.kt)("h2",{id:"goal"},"Goal"),(0,i.kt)("p",null,"Users sometimes need to enforce the same policy(s) with different configurations (parameters) for different targets (applications, resources, or namespaces)."),(0,i.kt)("h2",{id:"schema"},"Schema"),(0,i.kt)("p",null,"A new ",(0,i.kt)("inlineCode",{parentName:"p"},"PolicyConfig")," CRD allows using policies with multiple configurations by configuring policy parameters based on a certain match on applications or resources with Schema and match with one of the following"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Match by namespaces"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: pac.weave.works/v2beta2 \nkind: PolicyConfig      # policy config resource kind \nmetadata:       \n  name: my-config       # policy config name\nspec:\n  match:                # matches (targets of the policy config)\n    namespaces:         # add one or more name spaces\n    - dev\n    - prod\n  config:               # config for policies [one or more]\n    weave.policies.containers-minimum-replica-count:   \n      parameters:\n        replica_count: 3\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Match by apps"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: pac.weave.works/v2beta2 \nkind: PolicyConfig   # policy config resource kind \nmetadata:       \n  name: my-config    # policy config name\nspec:\n  match:             # matches (targets of the policy config)\n    apps:            # add one or more apps [HelmRelease, Kustomization]\n    - kind: HelmRelease\n      name: my-app            # app name\n      namespace: flux-system  # app namespace [if empty will match in any namespace]\n  config:            # config for policies [one or more]\n    weave.policies.containers-minimum-replica-count:   \n      parameters:\n        replica_count: 3\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Match by resources"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: pac.weave.works/v2beta2 \nkind: PolicyConfig   # policy config resource kind \nmetadata:       \n  name: my-config    # policy config name\nspec:\n  match:             # matches (targets of the policy config)\n    resources:       # add one or more resources [Deployment, ReplicaSet, ..]\n    - kind: Deployment          \n      name: my-deployment     # resource name\n      namespace: default      # resource namespace [if empty will match in any namespace]\n  config:            # config for policies [one or more]\n    weave.policies.containers-minimum-replica-count:   \n      parameters:\n        replica_count: 3\n")))),(0,i.kt)("h2",{id:"priority-of-enforcing-multiple-configs-with-overlapping-targets-from-low-to-high"},"Priority of enforcing multiple configs with overlapping targets ","[from low to high]"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Policy configs which targets the namespace."),(0,i.kt)("li",{parentName:"ul"},"Policy config which targets an application in all namespaces."),(0,i.kt)("li",{parentName:"ul"},"Policy config which targets an application in a certain namespace."),(0,i.kt)("li",{parentName:"ul"},"Policy config which targets a kubernetes resource in all namespaces."),(0,i.kt)("li",{parentName:"ul"},"Policy config which targets a kubernetes resource in a specific namespace.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note"),": "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"All configs are applied from low priority to high priority as well as common parameters between configs."),(0,i.kt)("li",{parentName:"ul"},"Each config only affects the parameters defined in it.")),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("p",null,"We have Kustomization application ",(0,i.kt)("inlineCode",{parentName:"p"},"app-a")," and deployment ",(0,i.kt)("inlineCode",{parentName:"p"},"deployment-1")," part of this application"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand to see manifests"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: pac.weave.works/v2beta2\nkind: PolicyConfig\nmetadata:\n  name: my-config-1\nspec:\n  match:\n    namespaces:\n    - flux-system\n  config:\n    weave.policies.containers-minimum-replica-count:\n      parameters:\n        replica_count: 2\n        owner: owner-1\n---\napiVersion: pac.weave.works/v2beta2\nkind: PolicyConfig\nmetadata:\n  name: my-config-2\nspec:\n  match:\n    apps:\n    - kind: Kustomization\n      name: app-a\n  config:\n    weave.policies.containers-minimum-replica-count:\n      parameters:\n        replica_count: 3\n---\napiVersion: pac.weave.works/v2beta2\nkind: PolicyConfig\nmetadata:\n  name: my-config-3\nspec:\n  match:\n    apps:\n    - kind: Kustomization\n      name: app-a\n      namespace: flux-system\n  config:\n    weave.policies.containers-minimum-replica-count:\n      parameters:\n        replica_count: 4\n---\napiVersion: pac.weave.works/v2beta2\nkind: PolicyConfig\nmetadata:\n  name: my-config-4\nspec:\n  match:\n    resources:\n    - kind: Deployment\n      name: deployment-1\n  config:\n    weave.policies.containers-minimum-replica-count:\n      parameters:\n        replica_count: 5\n        owner: owner-4\n---\n\napiVersion: pac.weave.works/v2beta2\nkind: PolicyConfig\nmetadata:\n  name: my-config-5\nspec:\n  match:\n    resources:\n    - kind: Deployment\n      name: deployment-1\n      namespace: flux-system\n  config:\n    weave.policies.containers-minimum-replica-count:\n      parameters:\n        replica_count: 6\n"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"In the above example when you apply the 5 configurations"),"..."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"app-a")," will be affected by ",(0,i.kt)("inlineCode",{parentName:"p"},"my-config-5"),". It will be applied on the policies defined in it, which will affect deployment ",(0,i.kt)("inlineCode",{parentName:"p"},"deployment-1")," in namespace ",(0,i.kt)("inlineCode",{parentName:"p"},"flux-system")," as it matches the kind, name and namespace. "),(0,i.kt)("admonition",{parentName:"li",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Deploying ",(0,i.kt)("inlineCode",{parentName:"p"},"deployment-1")," in another namespace other than ",(0,i.kt)("inlineCode",{parentName:"p"},"flux-system")," won't be affected by this configuration")),(0,i.kt)("p",{parentName:"li"},"Final config values will be as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"  config:\n    weave.policies.containers-minimum-replica-count:\n      parameters:\n        replica_count: 6 # from my-config-5\n        owner: owner-4   # from my-config-4\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Deployment ",(0,i.kt)("inlineCode",{parentName:"em"},"deployment-1")," in namespace ",(0,i.kt)("inlineCode",{parentName:"em"},"flux-system"),", ",(0,i.kt)("inlineCode",{parentName:"em"},"replica_count")," must\nbe ",(0,i.kt)("inlineCode",{parentName:"em"},">= 6"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Also it will be affected by ",(0,i.kt)("inlineCode",{parentName:"em"},"my-config-4")," for ",(0,i.kt)("inlineCode",{parentName:"em"},"owner")," configuration\nparameter ",(0,i.kt)("inlineCode",{parentName:"em"},"owner: owner-4")))))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"In the above example when you apply ",(0,i.kt)("inlineCode",{parentName:"strong"},"my-config-1"),", ",(0,i.kt)("inlineCode",{parentName:"strong"},"my-config-2"),", ",(0,i.kt)("inlineCode",{parentName:"strong"},"my-config-3")," and ",(0,i.kt)("inlineCode",{parentName:"strong"},"my-config-4"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"my-config-4")," will be applied on the policies defined in it. which will affect deployment ",(0,i.kt)("inlineCode",{parentName:"p"},"deployment-1")," in all namespaces as it matches the kind and name only."),(0,i.kt)("p",{parentName:"li"},"Final config values will be as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"  config:\n    weave.policies.containers-minimum-replica-count:\n      parameters:\n        replica_count: 5  # from my-config-4\n        owner: owner-4    # from my-config-4\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Deployment ",(0,i.kt)("inlineCode",{parentName:"em"},"deployment-1")," in all namespaces ",(0,i.kt)("inlineCode",{parentName:"em"},"replica_count")," must be ",(0,i.kt)("inlineCode",{parentName:"em"},">= 5"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Also it will be affected by ",(0,i.kt)("inlineCode",{parentName:"em"},"my-config-4")," for ",(0,i.kt)("inlineCode",{parentName:"em"},"owner")," configuration\nparameter ",(0,i.kt)("inlineCode",{parentName:"em"},"owner: owner-4")))))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"In the previous example when you apply ",(0,i.kt)("inlineCode",{parentName:"strong"},"my-config-1"),", ",(0,i.kt)("inlineCode",{parentName:"strong"},"my-config-2")," and ",(0,i.kt)("inlineCode",{parentName:"strong"},"my-config-3"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"my-config-3")," will be applied on the policies defined in it. which will affect application ",(0,i.kt)("inlineCode",{parentName:"p"},"app-a")," and all the resources in it in namespace ",(0,i.kt)("inlineCode",{parentName:"p"},"flux-system")," as it matches the kind, name and namespace."),(0,i.kt)("admonition",{parentName:"li",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Deploying ",(0,i.kt)("inlineCode",{parentName:"p"},"app-a")," in another namespace other than ",(0,i.kt)("inlineCode",{parentName:"p"},"flux-system")," won't be affected by this configuration")),(0,i.kt)("p",{parentName:"li"},"Final config values will be the follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"  config:\n    weave.policies.containers-minimum-replica-count:\n      parameters:\n        replica_count: 4    # from my-config-3\n        owner: owner-1      # from my-config-1\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Application ",(0,i.kt)("inlineCode",{parentName:"em"},"app-a")," and all the resources in it in namespaces\n",(0,i.kt)("inlineCode",{parentName:"em"},"flux-system"),", ",(0,i.kt)("inlineCode",{parentName:"em"},"replica_count")," must be ",(0,i.kt)("inlineCode",{parentName:"em"},">= 4"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Also it will be affected by ",(0,i.kt)("inlineCode",{parentName:"em"},"my-config-1")," for ",(0,i.kt)("inlineCode",{parentName:"em"},"owner")," configuration\nparameter ",(0,i.kt)("inlineCode",{parentName:"em"},"owner: owner-1")))))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"In the above example when you apply ",(0,i.kt)("inlineCode",{parentName:"strong"},"my-config-1")," and ",(0,i.kt)("inlineCode",{parentName:"strong"},"my-config-2"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"my-config-2")," will be applied on the policies defined in it. which will affect application ",(0,i.kt)("inlineCode",{parentName:"p"},"app-a")," and all the resources in it in all namespaces as it matches the kind and name only."),(0,i.kt)("p",{parentName:"li"},"Final config values will be as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"  config:\n    weave.policies.containers-minimum-replica-count:\n      parameters:\n        replica_count: 3   # from my-config-2\n        owner: owner-1     # from my-config-1\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Application ",(0,i.kt)("inlineCode",{parentName:"em"},"app-a")," and all the resources in all namespaces,\n",(0,i.kt)("inlineCode",{parentName:"em"},"replica_count")," must be ",(0,i.kt)("inlineCode",{parentName:"em"},">= 3"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Also it will be affected by ",(0,i.kt)("inlineCode",{parentName:"em"},"my-config-1")," for ",(0,i.kt)("inlineCode",{parentName:"em"},"owner")," configuration\nparameter ",(0,i.kt)("inlineCode",{parentName:"em"},"owner: owner-1")))))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"In the above example when you apply ",(0,i.kt)("inlineCode",{parentName:"strong"},"my-config-1"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"my-config-1")," will be applied on the policies defined in it. which will affect the namespace ",(0,i.kt)("inlineCode",{parentName:"p"},"flux-system")," with all applications and resources in it as it matches by namespace only."),(0,i.kt)("p",{parentName:"li"},"Final config values will be as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"  config:\n    weave.policies.containers-minimum-replica-count:\n      parameters:\n        replica_count: 2  # from my-config-1\n        owner: owner-1    # from my-config-1\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Any application or resource in namespace ",(0,i.kt)("inlineCode",{parentName:"em"},"flux-system"),", ",(0,i.kt)("inlineCode",{parentName:"em"},"replica_count")," must\nbe ",(0,i.kt)("inlineCode",{parentName:"em"},">= 2"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Also it will be affected by ",(0,i.kt)("inlineCode",{parentName:"em"},"my-config-1")," for ",(0,i.kt)("inlineCode",{parentName:"em"},"owner")," configuration\nparameter ",(0,i.kt)("inlineCode",{parentName:"em"},"owner: owner-1")))),(0,i.kt)("admonition",{parentName:"li",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"You can use one or more policies as the following example:"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand to see policy example"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"---\napiVersion: pac.weave.works/v2beta2\nkind: PolicyConfig\nmetadata:\n    name: my-app-config\nspec:\n    match:\n        resources:\n            name: my-deployment\n            kind: Deployment\n    config:\n        weave.policies.policy-1:\n            params:\n                replica_count: 3\n        weave.policies.policy-2:\n            params:\n                run_as_root: true\n")))))))}f.isMDXComponent=!0},3905:(e,n,a)=>{a.d(n,{Zo:()=>c,kt:()=>d});var t=a(67294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function r(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=t.createContext({}),m=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):r(r({},n),e)),a},c=function(e){var n=m(e.components);return t.createElement(p.Provider,{value:n},e.children)},s="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=m(a),u=i,d=s["".concat(p,".").concat(u)]||s[u]||f[u]||o;return a?t.createElement(d,r(r({ref:n},c),{},{components:a})):t.createElement(d,r({ref:n},c))}));function d(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=a.length,r=new Array(o);r[0]=u;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[s]="string"==typeof e?e:i,r[1]=l;for(var m=2;m<o;m++)r[m]=a[m];return t.createElement.apply(null,r)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);