"use strict";(self.webpackChunkweave_gitops_docs=self.webpackChunkweave_gitops_docs||[]).push([[1495],{74526:(e,t,a)=>{a.d(t,{Z:()=>o});var i=a(67294),n=a(88746);a(52426);const r={fontSize:16,marginLeft:4,fontVariant:"all-small-caps"};function o(e){let{tiers:t}=e;return i.createElement(n.Z,{title:`This feature is a available on ${t}.`,style:r},t)}},54618:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=a(87462),n=(a(67294),a(3905)),r=a(74526);const o={title:"Commit/Build Time Checks",hide_title:!0},l='Commit/Build time checks  <TierLabel tiers="Enterprise" />',s={unversionedId:"policy/commit-time-checks",id:"version-0.18.0/policy/commit-time-checks",title:"Commit/Build Time Checks",description:"Overview",source:"@site/versioned_docs/version-0.18.0/policy/commit-time-checks.mdx",sourceDirName:"policy",slug:"/policy/commit-time-checks",permalink:"/docs/0.18.0/policy/commit-time-checks",draft:!1,editUrl:"https://github.com/weaveworks/weave-gitops/edit/main/website/versioned_docs/version-0.18.0/policy/commit-time-checks.mdx",tags:[],version:"0.18.0",frontMatter:{title:"Commit/Build Time Checks",hide_title:!0},sidebar:"docs",previous:{title:"Profile Releases",permalink:"/docs/0.18.0/policy/releases"},next:{title:"Using templates",permalink:"/docs/0.18.0/gitops-templates/templates"}},p={},c=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Setup policies",id:"setup-policies",level:2},{value:"Auto-Remediation",id:"auto-remediation",level:2},{value:"UseCase: Github",id:"usecase-github",level:2},{value:"UseCase: Gitlab",id:"usecase-gitlab",level:2},{value:"Enable Auto Remediation",id:"enable-auto-remediation",level:4},{value:"Enable Static Application Security Testing",id:"enable-static-application-security-testing",level:4},{value:"UseCase: Bitbucket",id:"usecase-bitbucket",level:2},{value:"Enable Auto Remediation",id:"enable-auto-remediation-1",level:4},{value:"Create Pipeline Report",id:"create-pipeline-report",level:4},{value:"UseCase: CircleCI",id:"usecase-circleci",level:2},{value:"Enable Auto Remediation",id:"enable-auto-remediation-2",level:4},{value:"UseCase: Azure DevOps",id:"usecase-azure-devops",level:2},{value:"Enable Auto Remediation",id:"enable-auto-remediation-3",level:4}],u={toc:c};function m(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,i.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"commitbuild-time-checks--"},"Commit/Build time checks  ",(0,n.kt)(r.Z,{tiers:"Enterprise",mdxType:"TierLabel"})),(0,n.kt)("h2",{id:"overview"},"Overview"),(0,n.kt)("p",null,"Weave GitOps Enterprise enable developers and operators to check policy violations early in their software development life cycle, specifically at commit and build time. Developers and operators can have Weave Policy Validator integrated in their CI tools to validate whether their code changes are violating any policies or not. "),(0,n.kt)("p",null,"Weave GitOps Enterprise offer a policy engine image that can be used to perform commit/build time checks.The image can be found on Docker Hub under the name: ",(0,n.kt)("inlineCode",{parentName:"p"},"weaveworks/weave-iac-validator:v1.1"),". "),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"USAGE:\n   main [global options] command [command options] [arguments...]\n\nVERSION:\n   0.0.1\n\nCOMMANDS:\n   help, h  Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --path value                       path to resources kustomization directory\n   --helm-values-file value           path to resources helm values file\n   --policies-path value              path to policies kustomization directory\n   --policies-helm-values-file value  path to policies helm values file\n   --git-repo-provider value          git repository provider [$WEAVE_REPO_PROVIDER]\n   --git-repo-url value               git repository url [$WEAVE_REPO_URL]\n   --git-repo-branch value            git repository branch [$WEAVE_REPO_BRANCH]\n   --git-repo-sha value               git repository commit sha [$WEAVE_REPO_SHA]\n   --git-repo-token value             git repository token [$WEAVE_REPO_TOKEN]\n   --sast value                       save result as gitlab sast format\n   --sarif value                      save result as sarif format\n   --json value                       save result as json format\n   --generate-git-report              generate git report if supported (default: false) [$WEAVE_GENERATE_GIT_PROVIDER_REPORT]\n   --remediate                        auto remediate resources if possible (default: false)\n   --no-exit-error                    exit with no error (default: false)\n   --help, -h                         show help (default: false)\n   --version, -v                      print the version (default: false)\n")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"setup-policies"},"Setup policies"),(0,n.kt)("p",null,"Policies can be helm chart, kustomize directory or just plain kubernetes yaml files."),(0,n.kt)("p",null,"Example of policies kustomize directory"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"\u2514\u2500\u2500 policies\n    \u251c\u2500\u2500 kustomization.yaml\n    \u251c\u2500\u2500 minimum-replica-count.yaml\n    \u251c\u2500\u2500 privileged-mode.yaml\n    \u2514\u2500\u2500 privilege-escalation.yaml\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"# kustomization.yaml\nkind: Kustomization\napiVersion: kustomize.config.k8s.io/v1beta1\nresources:\n- minimum-replica-count.yaml\n- privilege-escalation.yaml\n- privileged-mode.yaml\n")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"auto-remediation"},"Auto-Remediation"),(0,n.kt)("p",null,"Weave validator supports auto-remediation functionality which creates a pull request with suggested fixes to remediate the reported violations."),(0,n.kt)("p",null,"Supported in:"),(0,n.kt)("ul",{className:"contains-task-list"},(0,n.kt)("li",{parentName:"ul",className:"task-list-item"},(0,n.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Helm"),(0,n.kt)("li",{parentName:"ul",className:"task-list-item"},(0,n.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Kustomize"),(0,n.kt)("li",{parentName:"ul",className:"task-list-item"},(0,n.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Plain kubernetes files")),(0,n.kt)("p",null,"To enable it you need to provide ",(0,n.kt)("inlineCode",{parentName:"p"},"--remediate")," flag and ",(0,n.kt)("inlineCode",{parentName:"p"},"--git-repo-token"),"."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"}," The token must have the permission to create pull request")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"usecase-github"},"UseCase: Github"),(0,n.kt)("p",null,"See how to setup the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/weaveworks/weave-action"},"Github Action")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"usecase-gitlab"},"UseCase: Gitlab"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"weave:\n  image:\n    name: weaveworks/weave-iac-validator:v1.1\n  script:\n  - weave-validator --path <path to resources> --policies-path <path to policies>\n")),(0,n.kt)("h4",{id:"enable-auto-remediation"},"Enable Auto Remediation"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"  script:\n  - weave-validator --path <path to resources> --policies-path <path to policies> --git-repo-token $GITLAB_TOKEN --remediate\n")),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"enable-static-application-security-testing"},"Enable Static Application Security Testing"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},'stages:\n  - weave\n  - sast\n\nweave:\n  stage: weave\n  image:\n    name: weaveworks/weave-iac-validator:v1.1\n  script:\n  - weave-validator <path to resources> --policies-path <path to policies> --sast sast.json\n  artifacts:\n    when: on_failure\n    paths:\n    - sast.json\n\nupload_sast:\n  stage: sast\n  when: always\n  script:\n  - echo "creating sast report" \n  artifacts:\n    reports:\n      sast: sast.json\n')),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"usecase-bitbucket"},"UseCase: Bitbucket"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"pipelines:\n  default:\n    - step:\n        name: 'Weaveworks'\n        image: weaveworks/weave-iac-validator:v1.1\n        script:\n          - weave-validator --path <path to resources> --policies-path <path to policies>\n")),(0,n.kt)("h4",{id:"enable-auto-remediation-1"},"Enable Auto Remediation"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"  script:\n    - weave-validator --path <path to resources> --policies-path <path to policies> --git-repo-token $TOKEN --remediate\n")),(0,n.kt)("h4",{id:"create-pipeline-report"},"Create Pipeline Report"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"  script:\n    - weave-validator --path <path to resources> --policies-path <path to policies> --git-repo-token $TOKEN -generate-git-report\n")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"usecase-circleci"},"UseCase: CircleCI"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"jobs:\n  weave:\n    docker:\n    - image: weaveworks/weave-iac-validator:v1.1\n    steps:\n    - checkout\n    - run:\n        command: weave-validator --path <path to resources> --policies-path <path to policies>\n")),(0,n.kt)("h4",{id:"enable-auto-remediation-2"},"Enable Auto Remediation"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"    - run:\n        command: weave-validator --path <path to resources> --policies-path <path to policies> --git-repo-token ${GITHUB_TOKEN} --remediate\n")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"usecase-azure-devops"},"UseCase: Azure DevOps"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"trigger:\n- <list of branches to trigger the pipeline on>\n\npool:\n  vmImage: ubuntu-latest\n\ncontainer:\n  image: weaveworks/weave-iac-validator:v1.1-azure\n\nsteps:\n- script: weave-validator --path <path to resources> --policies-path <path to policies> --git-repo-token $(TOKEN)\n")),(0,n.kt)("h4",{id:"enable-auto-remediation-3"},"Enable Auto Remediation"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"steps:\n- script: weave-validator --path <path to resources> --policies-path <path to policies> --git-repo-token $(TOKEN) --remediate\n")))}m.isMDXComponent=!0},3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>v});var i=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=i.createContext({}),p=function(e){var t=i.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(a),d=n,v=u["".concat(s,".").concat(d)]||u[d]||m[d]||r;return a?i.createElement(v,o(o({ref:t},c),{},{components:a})):i.createElement(v,o({ref:t},c))}));function v(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,o=new Array(r);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:n,o[1]=l;for(var p=2;p<r;p++)o[p]=a[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);