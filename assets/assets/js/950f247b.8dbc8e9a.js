"use strict";(self.webpackChunkweave_gitops_docs=self.webpackChunkweave_gitops_docs||[]).push([[11974],{8971:(e,n,a)=>{a.d(n,{Z:()=>i});var t=a(67294),s=a(88746);a(52426);const r={fontSize:16,marginLeft:4,fontVariant:"all-small-caps"};function i(e){let{tiers:n}=e;return t.createElement(s.Z,{title:`This feature is a available on ${n}.`,style:r},n)}},9420:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>p,default:()=>E,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var t=a(87462),s=(a(67294),a(3905)),r=a(8971),i=a(77823),o=a(83565);const l={title:"Example: CAPD Template",hide_title:!0},p='CAPD Template Example <TierLabel tiers="Enterprise" />',c={unversionedId:"gitops-templates/capd-example",id:"version-0.26.0/gitops-templates/capd-example",title:"Example: CAPD Template",description:"This full example works with the CAPD provider, see Cluster API Providers.",source:"@site/versioned_docs/version-0.26.0/gitops-templates/capd-example.mdx",sourceDirName:"gitops-templates",slug:"/gitops-templates/capd-example",permalink:"/docs/0.26.0/gitops-templates/capd-example",draft:!1,editUrl:"https://github.com/weaveworks/weave-gitops/edit/main/website/versioned_docs/version-0.26.0/gitops-templates/capd-example.mdx",tags:[],version:"0.26.0",frontMatter:{title:"Example: CAPD Template",hide_title:!0},sidebar:"docs",previous:{title:"Example: Template to Create a CAPI Cluster",permalink:"/docs/0.26.0/gitops-templates/create-cluster-example"},next:{title:"CLI",permalink:"/docs/0.26.0/gitops-templates/cli"}},m={},d=[],u={toc:d};function E(e){let{components:n,...a}=e;return(0,s.kt)("wrapper",(0,t.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"capd-template-example-"},"CAPD Template Example ",(0,s.kt)(r.Z,{tiers:"Enterprise",mdxType:"TierLabel"})),(0,s.kt)("p",null,"This full example works with the CAPD provider, see ",(0,s.kt)("a",{parentName:"p",href:"/docs/0.26.0/cluster-management/cluster-api-providers"},"Cluster API Providers"),"."),(0,s.kt)(i.Z,{title:"clusters/management/capi/templates/capd-template.yaml",className:"language-yaml",mdxType:"CodeBlock"},o.Z))}E.isMDXComponent=!0},83565:(e,n,a)=>{a.d(n,{Z:()=>t});const t='apiVersion: templates.weave.works/v1alpha2\nkind: GitOpsTemplate\nmetadata:\n  name: cluster-template-development\n  namespace: default\n  annotations:\n    templates.weave.works/add-common-bases: "true"\n    templates.weave.works/inject-prune-annotation: "true"\n  labels:\n    weave.works/template-type: cluster\nspec:\n  description: A simple CAPD template\n  params:\n    - name: CLUSTER_NAME\n      required: true\n      description: This is used for the cluster naming.\n    - name: NAMESPACE\n      description: Namespace to create the cluster in\n    - name: KUBERNETES_VERSION\n      description: Kubernetes version to use for the cluster\n      options: ["1.19.11", "1.21.1", "1.22.0", "1.23.3"]\n    - name: CONTROL_PLANE_MACHINE_COUNT\n      description: Number of control planes\n      options: ["1", "2", "3"]\n    - name: WORKER_MACHINE_COUNT\n      description: Number of worker machines\n  resourcetemplates:\n    - content:\n        - apiVersion: gitops.weave.works/v1alpha1\n          kind: GitopsCluster\n          metadata:\n            name: "${CLUSTER_NAME}"\n            namespace: "${NAMESPACE}"\n            labels:\n              weave.works/capi: bootstrap\n          spec:\n            capiClusterRef:\n              name: "${CLUSTER_NAME}"\n        - apiVersion: cluster.x-k8s.io/v1beta1\n          kind: Cluster\n          metadata:\n            name: "${CLUSTER_NAME}"\n            namespace: "${NAMESPACE}"\n            labels:\n              cni: calico\n          spec:\n            clusterNetwork:\n              pods:\n                cidrBlocks:\n                  - 192.168.0.0/16\n              serviceDomain: cluster.local\n              services:\n                cidrBlocks:\n                  - 10.128.0.0/12\n            controlPlaneRef:\n              apiVersion: controlplane.cluster.x-k8s.io/v1beta1\n              kind: KubeadmControlPlane\n              name: "${CLUSTER_NAME}-control-plane"\n              namespace: "${NAMESPACE}"\n            infrastructureRef:\n              apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n              kind: DockerCluster\n              name: "${CLUSTER_NAME}"\n              namespace: "${NAMESPACE}"\n        - apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n          kind: DockerCluster\n          metadata:\n            name: "${CLUSTER_NAME}"\n            namespace: "${NAMESPACE}"\n        - apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n          kind: DockerMachineTemplate\n          metadata:\n            name: "${CLUSTER_NAME}-control-plane"\n            namespace: "${NAMESPACE}"\n          spec:\n            template:\n              spec:\n                extraMounts:\n                  - containerPath: /var/run/docker.sock\n                    hostPath: /var/run/docker.sock\n        - apiVersion: controlplane.cluster.x-k8s.io/v1beta1\n          kind: KubeadmControlPlane\n          metadata:\n            name: "${CLUSTER_NAME}-control-plane"\n            namespace: "${NAMESPACE}"\n          spec:\n            kubeadmConfigSpec:\n              clusterConfiguration:\n                apiServer:\n                  certSANs:\n                    - localhost\n                    - 127.0.0.1\n                    - 0.0.0.0\n                controllerManager:\n                  extraArgs:\n                    enable-hostpath-provisioner: "true"\n              initConfiguration:\n                nodeRegistration:\n                  criSocket: /var/run/containerd/containerd.sock\n                  kubeletExtraArgs:\n                    cgroup-driver: cgroupfs\n                    eviction-hard: nodefs.available<0%,nodefs.inodesFree<0%,imagefs.available<0%\n              joinConfiguration:\n                nodeRegistration:\n                  criSocket: /var/run/containerd/containerd.sock\n                  kubeletExtraArgs:\n                    cgroup-driver: cgroupfs\n                    eviction-hard: nodefs.available<0%,nodefs.inodesFree<0%,imagefs.available<0%\n            machineTemplate:\n              infrastructureRef:\n                apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n                kind: DockerMachineTemplate\n                name: "${CLUSTER_NAME}-control-plane"\n                namespace: "${NAMESPACE}"\n            replicas: "${CONTROL_PLANE_MACHINE_COUNT}"\n            version: "${KUBERNETES_VERSION}"\n        - apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n          kind: DockerMachineTemplate\n          metadata:\n            name: "${CLUSTER_NAME}-md-0"\n            namespace: "${NAMESPACE}"\n          spec:\n            template:\n              spec: {}\n        - apiVersion: bootstrap.cluster.x-k8s.io/v1beta1\n          kind: KubeadmConfigTemplate\n          metadata:\n            name: "${CLUSTER_NAME}-md-0"\n            namespace: "${NAMESPACE}"\n          spec:\n            template:\n              spec:\n                joinConfiguration:\n                  nodeRegistration:\n                    kubeletExtraArgs:\n                      cgroup-driver: cgroupfs\n                      eviction-hard: nodefs.available<0%,nodefs.inodesFree<0%,imagefs.available<0%\n        - apiVersion: cluster.x-k8s.io/v1beta1\n          kind: MachineDeployment\n          metadata:\n            name: "${CLUSTER_NAME}-md-0"\n            namespace: "${NAMESPACE}"\n          spec:\n            clusterName: "${CLUSTER_NAME}"\n            replicas: "${WORKER_MACHINE_COUNT}"\n            selector:\n              matchLabels: null\n            template:\n              spec:\n                bootstrap:\n                  configRef:\n                    apiVersion: bootstrap.cluster.x-k8s.io/v1beta1\n                    kind: KubeadmConfigTemplate\n                    name: "${CLUSTER_NAME}-md-0"\n                    namespace: "${NAMESPACE}"\n                clusterName: "${CLUSTER_NAME}"\n                infrastructureRef:\n                  apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n                  kind: DockerMachineTemplate\n                  name: "${CLUSTER_NAME}-md-0"\n                  namespace: "${NAMESPACE}"\n                version: "${KUBERNETES_VERSION}"\n'}}]);